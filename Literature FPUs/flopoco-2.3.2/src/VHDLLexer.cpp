#line 2 "src/VHDLLexer.cpp"

#line 4 "src/VHDLLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE Flopoco_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE Flopoco_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via Flopoco_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void Flopoco_restart (FILE *input_file ,yyscan_t yyscanner );
void Flopoco__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE Flopoco__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void Flopoco__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void Flopoco__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void Flopoco_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void Flopoco_pop_buffer_state (yyscan_t yyscanner );

static void Flopoco_ensure_buffer_stack (yyscan_t yyscanner );
static void Flopoco__load_buffer_state (yyscan_t yyscanner );
static void Flopoco__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER Flopoco__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE Flopoco__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE Flopoco__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE Flopoco__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *Flopoco_alloc (yy_size_t ,yyscan_t yyscanner );
void *Flopoco_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void Flopoco_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer Flopoco__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        Flopoco_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Flopoco__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        Flopoco_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            Flopoco__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Flopoco_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 92
#define YY_END_OF_BUFFER 93
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[660] =
    {   0,
        0,    0,   93,   91,   83,   83,   85,   91,   91,   85,
       85,   85,   85,   86,   85,   85,   85,   85,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,    0,
       88,    0,   88,    0,   85,    0,    0,    0,   86,    0,
        0,    0,    0,   84,    0,   84,   84,   84,   84,   84,
       84,   84,   84,    0,    0,    0,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   33,   34,   36,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   49,   50,   84,   52,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   70,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   34,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   87,    0,   90,    0,   86,    0,

        0,   86,   82,    1,   84,   84,   84,    5,    6,   84,
       84,   84,   84,    0,    0,   84,   84,   84,   84,   15,
       84,   84,   84,   84,   84,   84,   24,   84,   84,   84,
       28,   84,   84,   84,   84,   84,   84,   84,   84,   41,
       42,   84,   44,   84,   46,   47,   84,   84,   84,   54,
       84,   84,   84,   84,   84,   84,   62,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   75,   84,
       84,   84,   84,   84,   81,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       86,    0,    0,    0,   86,    0,    0,    0,   86,    0,
       86,    0,   84,   84,   84,   84,   84,   84,   84,   89,
        0,    0,    0,    0,   84,   84,   13,   84,   16,   84,
       84,   84,   84,   84,   22,   84,   84,   26,   27,   84,
       84,   84,   84,   84,   84,   84,   40,   43,   45,   48,
       51,   84,   84,   56,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   69,   84,   72,   84,   84,   84,

       77,   78,   84,   80,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,    0,    0,    0,    0,   84,
        3,    4,   84,    8,   84,   84,   11,   12,   84,   84,
       84,   84,   84,   84,   23,   84,   84,   84,   84,   35,
       37,   84,   84,   84,   84,   84,   59,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   73,   74,   84,   79,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,    0,
       86,    0,    0,    0,    0,    0,   86,    2,   84,    9,
       84,   14,   84,   84,   84,   84,   21,   25,   84,   84,
       84,   84,   84,   84,   53,   84,   84,   84,   60,   84,
       63,   64,   65,   84,   67,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   86,    0,
       86,    0,   84,   84,   84,   84,   84,   84,   84,   84,
       31,   32,   38,   39,   55,   84,   58,   84,   84,   68,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   19,
       84,   29,   30,   84,   61,   66,   84,   76,   84,   84,
       84,   84,   84,   84,   84,   84,   10,   17,   84,   84,
       57,   71,   84,   84,   84,   84,   84,   20,   84,   84,
       84,   84,   84,   84,    7,   84,   84,   18,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    7,    7,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       34,   41,   42,   43,   44,   45,   46,   47,   48,   34,
        7,    7,    7,    7,   49,    7,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   59,   66,   67,   68,   69,   70,   71,   72,
       73,   59,    7,   74,    7,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[75] =
    {   0,
        1,    2,    1,    3,    4,    5,    3,    6,    3,    3,
        3,    3,    3,    3,    3,    3,    7,    3,    8,    9,
        3,    3,    2,    3,    8,    8,    8,    8,    8,    8,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   10,    8,
        8,    8,    8,    8,    8,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    3
    } ;

static yyconst flex_uint16_t yy_base[677] =
    {   0,
        0,    0,  430, 3219, 3219, 3219, 3219,  423,  406,    0,
      377,  370,  355,   69,  353,   53,  342,  304,   78,  101,
       90,   89,  108,  109,  131,   76,  139,  145,  162,  170,
      195,  181,  203,  163,  208,  222,   77,  240,  246,  235,
      274,  244,  159,  257,  268,  276,  298,  290,  260,  310,
      344,  332,  334,  348,  354,  366,  385,  393,  417,  317,
      310,  303,  266,  256, 3219,  250,    0,  210,  435,    0,
       68,  197,   94,  232,  189,  421,  422,  424,  436,  430,
      434,  454,  437,  472,    0,    0,  474,  476,  485,  486,
      488,  489,  491,  496,  499,  508,  516,  527,  530,  544,

      545,  541,  550,  552,  554,  558,  572,  557,  585,  586,
      590,  595,  609,  600,  610,  614,  617,  615,  622,  624,
      628,  620,  651,  655,  658,  660,  663,  680,  668,  685,
      690,  697,  700,  709,  712,  708,  719,  717,  722,  724,
      728,  752,  753,  760,  763,  767,  770,  772,  776,  777,
      782,  783,  794,  787,  795,  822,  825,  837,  839,  845,
      849,  850,  853,  856,  857,  867,  861,  868,  873,  905,
      912,  913,  917,  921,  925,  922,  936,  927,  937,  940,
      950,  949,  985,  993,  994,  990,  998, 1002, 1003, 1005,
     1007, 1027, 1009, 1012, 3219,  188, 3219,  345,  351,  324,

      171,  117, 3219, 1043, 1044, 1051, 1066, 1060, 1067, 1073,
     1085, 1084, 1080,   85,   86, 1095, 1096, 1102, 1097, 1109,
     1112, 1115, 1124, 1129, 1134, 1146, 1137, 1147, 1151, 1161,
     1165, 1166, 1169, 1179, 1180, 1183, 1185, 1174, 1199, 1202,
     1214, 1215, 1217, 1219, 1229, 1231, 1233, 1234, 1242, 1244,
     1251, 1247, 1258, 1253, 1256, 1271, 1275, 1286, 1285, 1287,
     1290, 1295, 1299, 1309, 1315, 1326, 1328, 1329, 1338, 1343,
     1357, 1344, 1358, 1363, 1361, 1366, 1367, 1368, 1381, 1386,
     1396, 1399, 1400, 1403, 1411, 1423, 1431, 1430, 1438, 1439,
     1440, 1467, 1469, 1445, 1474, 1481, 1475, 1473, 1497, 1508,

     1509, 1512, 1515, 1524, 1532, 1540, 1542, 1548, 1546, 1547,
     1565, 1576, 1580, 1581, 1584, 1585, 1588, 1596, 1608, 1618,
     1620, 1624, 1626, 1633, 1636, 1649, 1651, 1653, 1656, 1661,
      120,    0,  352,  555, 1030,  160,    0,  355,  122,  445,
      124,  148, 1666, 1686, 1688, 1689, 1676, 1690, 1718, 3219,
      166,  256,  194,  219, 1691, 1719, 1721, 1724, 1726, 1732,
     1741, 1734, 1743, 1746, 1756, 1757, 1761, 1763, 1770, 1774,
     1786, 1792, 1799, 1798, 1801, 1805, 1776, 1806, 1809, 1814,
     1816, 1829, 1834, 1838, 1843, 1844, 1841, 1854, 1858, 1872,
     1874, 1877, 1866, 1882, 1883, 1886, 1896, 1902, 1906, 1914,

     1910, 1915, 1918, 1920, 1925, 1934, 1938, 1948, 1947, 1950,
     1952, 1954, 1958, 1970, 1963, 1986, 1966, 1988, 2000, 2002,
     2006, 2020, 2024, 2030, 2031, 2036, 2037, 2043, 2040, 2054,
     2059, 2068, 2079, 2082, 2092, 2093, 2098, 2107, 2112, 2116,
     2117, 2121, 2125, 2130, 2123,  300,  192,  201,  488, 2134,
     2132, 2141, 2152, 2169, 2176, 2180, 2185, 2189, 2191, 2192,
     2200, 2203, 2198, 2194, 2214, 2222, 2225, 2242, 2233, 2237,
     2249, 2253, 2257, 2255, 2262, 2267, 2264, 2277, 2287, 2294,
     2297, 2299, 2301, 2305, 2316, 2317, 2306, 2310, 2321, 2329,
     2330, 2349, 2358, 2359, 2362, 2360, 2365, 2366, 2369, 2371,

     2373, 2378, 2389, 2401, 2382, 2402, 2411, 2417, 2431, 2439,
     2440, 2441, 2442, 2447, 2454, 2470, 2451, 2474, 2479,  144,
      140,  282,  336,  255,  343,  137,  258, 2483, 2484, 2497,
     2499, 2502, 2512, 2515, 2519, 2522, 2524, 2527, 2535, 2532,
     2542, 2554, 2547, 2560, 2564, 2565, 2576, 2570, 2577, 2578,
     2583, 2588, 2595, 2600, 2606, 2613, 2608, 2615, 2622, 2631,
     2633, 2637, 2644, 2646, 2650, 2656, 2661, 2666, 2668, 2673,
     2679, 2681, 2688, 2695, 2719, 2723, 2724, 2729,  372,  133,
      536,   88, 2730, 2733, 2736, 2743, 2737, 2746, 2760, 2768,
     2779, 2787, 2791, 2792, 2797, 2798, 2799, 2801, 2803, 2804,

     2814, 2809, 2810, 2811, 2821, 2833, 2841, 2843, 2852, 2863,
     2855, 2865, 2870, 2871, 2875, 2879, 2887, 2883, 2916, 2885,
     2921, 2923, 2928, 2931, 2933, 2936, 2938, 2940, 2943, 2945,
     2948, 2951, 2953, 2955, 2965, 2973, 2989, 2996, 3001, 3004,
     3005, 3006, 3008, 3011, 3013, 3018, 3016, 3019, 3023, 3033,
     3035, 3046, 3038, 3050, 3073, 3074, 3078, 3081, 3219, 3140,
     3149, 3158, 3167, 3177,   89,   87,   85,   77, 3183, 3187,
     3194, 3199,   75,   73, 3205, 3208
    } ;

static yyconst flex_int16_t yy_def[677] =
    {   0,
      659,    1,  659,  659,  659,  659,  659,  660,  661,  662,
      659,  659,  659,  659,  659,  659,  659,  659,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  660,
      659,  661,  659,  659,  659,  664,  665,  659,  659,  666,
      659,  659,  659,  663,  659,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  667,  668,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  659,  664,  659,  669,  659,  670,

      659,  659,  659,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  671,  672,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      659,  673,  669,  669,  659,  659,  674,  670,  659,  670,
      659,  659,  663,  663,  663,  663,  663,  663,  663,  659,
      671,  671,  672,  672,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  659,  675,  676,  659,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  659,
      659,  675,  675,  676,  676,  659,  659,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  659,  659,
      659,  659,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,    0,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659
    } ;

static yyconst flex_uint16_t yy_nxt[3294] =
    {   0,
        4,    5,    6,    7,    8,    4,    4,    9,    7,   10,
        7,    7,   11,    7,    7,   12,    7,   13,   14,   15,
        7,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   26,   26,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   26,    4,   40,
       41,   42,   43,   44,   45,   46,   26,   47,   26,   26,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   26,    7,   67,   65,   65,   73,   73,   73,
      448,  201,  447,  201,  215,   68,  202,   69,   70,  350,
       73,   73,  214,  350,  200,   73,  198,   71,   75,   75,

       75,  135,   73,   76,   77,   85,  581,   78,   86,   73,
       73,   75,   75,   79,   91,   80,   75,   72,   81,   82,
       83,   93,   71,   75,   84,   84,   84,   94,   92,   87,
       75,   75,   73,  352,  354,  341,   88,   84,   84,   89,
       73,   98,  341,   95,   90,   96,   73,   99,  446,   84,
      449,  579,  100,   75,   97,  527,   84,   84,  579,  101,
       73,   75,  521,   73,   73,  342,  341,   75,  103,  106,
      350,   73,  342,  446,  102,  449,  104,  107,  335,   84,
      105,   75,   73,  108,   75,   75,  109,   84,  580,  202,
      197,  126,   75,   84,  111,  127,   73,  331,  112,   85,

      110,  350,   86,   75,   73,  121,  128,   84,  113,   73,
       84,   84,  203,  114,  352,   69,  154,   75,   84,  122,
      339,  123,  155,   73,  115,   75,  659,  124,  199,   84,
       75,  125,  116,   73,  117,  118,   73,  119,  120,  129,
      523,   73,  354,   84,   75,   73,  130,   73,  131,  525,
       85,   84,  197,   86,   75,  132,   84,   75,   73,  133,
      659,   73,   75,  134,  136,  195,   75,  659,   75,   73,
       84,  137,  138,   62,  339,   73,  581,   73,   85,   75,
       84,   86,   75,   84,  139,  140,  141,  331,   84,  142,
       75,   73,   84,  152,   84,  143,   75,  144,   75,   73,

      145,  146,  147,  525,  659,   84,  582,  153,   84,  168,
       63,   73,   75,  520,   60,  520,   84,  156,  521,  157,
       75,   61,   84,  169,   84,  159,   65,  148,  158,  162,
      523,  160,   75,   73,  149,   73,  161,  150,   84,  165,
      337,  659,  151,  339,  163,   73,   84,  166,   85,   73,
      331,   86,  103,  167,   75,   73,   75,  331,   84,  170,
      164,  332,  659,  171,  105,   65,   75,   73,  332,  335,
       75,  337,  340,  172,  339,   65,   75,   65,  173,   71,
       84,  177,   84,  180,  659,   66,   73,  181,   75,   65,
      579,  659,   84,  334,   73,  178,   84,  179,  115,  336,

      334,  182,   84,  340,   71,  183,  116,   75,  174,  118,
      185,  175,  176,   63,   84,   75,  184,  130,   73,  186,
      580,   85,   73,   73,   86,   73,  187,   61,  188,  659,
      659,   73,  189,   84,  190,   73,  659,   73,   73,   75,
       67,   84,  191,   75,   75,  659,   75,  659,  205,  192,
      193,   68,   75,   69,   70,   73,   75,  209,   75,   75,
      210,  659,  204,   71,  659,   84,  206,  659,  207,   84,
       84,  208,   84,  659,  211,   73,   75,   73,   84,  213,
      194,  659,   84,   72,   84,   84,   73,   73,   71,   73,
       73,  659,   73,  659,  659,  212,   75,   73,   75,  659,

       73,  526,   84,  526,  216,  659,  527,   75,   75,   73,
       75,   75,  218,   75,  217,  219,  659,   73,   75,  659,
      659,   75,   84,  659,   84,  222,  223,  220,   73,  221,
       75,   73,  224,   84,   84,  227,   84,   84,   75,   84,
      226,  225,   73,  659,   84,   73,   73,   84,  229,   75,
      228,   73,   75,   73,  581,   73,   84,  659,   73,   73,
      659,  659,  230,   75,   84,  234,   75,   75,  659,  659,
      231,  659,   75,   73,   75,   84,   75,  659,   84,   75,
       75,  232,  233,  236,  582,  659,   73,   73,  659,   84,
      235,   73,   84,   84,   75,  239,   73,  237,   84,  659,

       84,   73,   84,  659,  659,   84,   84,   75,   75,  238,
       73,   73,   75,  241,  659,   73,   73,   75,   73,  659,
       84,   73,   75,   73,  240,   73,  659,  242,  659,   73,
      659,   75,   75,   84,   84,  247,   75,   75,   84,   75,
      243,  244,   75,   84,   75,  248,   75,  659,   84,  245,
       75,  246,   73,  249,  251,  659,   73,   84,   84,   73,
      252,   73,   84,   84,   73,   84,  250,  659,   84,   73,
       84,  659,   84,   75,  659,  659,   84,   75,  659,  659,
       75,   73,   75,  659,  255,   75,   73,  659,  256,  253,
       75,   73,  254,  262,  257,  260,  264,  258,   73,   84,

      259,   73,   75,   84,  261,  263,   84,   75,   84,   73,
       73,   84,   75,   73,  265,  659,   84,  659,   73,   75,
       73,  659,   75,   73,  659,   73,  659,  659,   84,   73,
       75,   75,  267,   84,   75,  659,  266,  269,   84,   75,
      271,   75,  268,  659,   75,   84,   75,  272,   84,  659,
       75,  273,  270,   73,   73,  659,   84,   84,  659,  274,
       84,   73,  275,  659,   73,   84,  659,   84,   73,  659,
       84,   73,   84,   73,   75,   75,   84,   73,   73,  276,
      659,  659,   75,   73,   73,   75,  659,  659,   73,   75,
      204,  659,   75,  659,   75,   73,   73,  659,   75,   75,

       84,   84,  659,  659,   75,   75,  659,  659,   84,   75,
      278,   84,  209,  208,  279,   84,   75,   75,   84,  277,
       84,  659,  659,   73,   84,   84,   73,  283,  280,  285,
       84,   84,  659,  281,  659,   84,  286,  282,   73,  284,
       73,  659,   84,   84,   75,  659,   73,   75,  220,  287,
       73,   73,  659,  290,   73,  288,  289,   73,   73,   75,
      659,   75,   73,  659,  659,  291,  659,   75,   73,   73,
       84,   75,   75,   84,   73,   75,  659,  227,   75,   75,
      659,  659,  659,   75,  659,   84,  659,   84,  292,   75,
       75,  659,  293,   84,  294,   75,  659,   84,   84,  295,

      659,   84,  298,  659,   84,   84,   73,  300,  659,   84,
      231,  296,  297,   73,   73,   84,   84,  301,   73,  299,
      659,   84,   73,   73,  303,  241,   73,   75,   73,  302,
      659,  659,  240,  659,   75,   75,  659,   73,   73,   75,
      659,   73,  659,   75,   75,  659,  659,   75,  659,   75,
       73,   73,  659,   84,  659,  659,  659,  659,   75,   75,
       84,   84,   75,  659,  659,   84,  659,  304,  659,   84,
       84,   75,   75,   84,  307,   84,  659,  306,  245,  659,
      246,  308,  243,  305,   84,   84,   73,  309,   84,  250,
      659,   73,  310,  659,   73,   73,  659,   84,   84,   73,

      311,  313,  312,   73,   73,  314,   73,   75,   73,  317,
       73,  257,   75,   73,  315,   75,   75,  316,  318,  659,
       75,  659,  659,  659,   75,   75,  659,   75,   73,   75,
      659,   75,  659,   84,   75,  659,  659,  659,   84,  322,
      319,   84,   84,  320,   73,   73,   84,  321,  335,   75,
       84,   84,   73,   84,  659,   84,  269,   84,   71,  324,
       84,   73,  323,  659,  327,   75,   75,   73,   73,  325,
      326,  659,  343,   75,   73,   84,  330,  275,  336,  344,
      328,   73,   75,   71,  329,   73,   73,  659,   75,   75,
      345,   84,   84,  659,  659,   75,   73,   73,   73,   84,

      659,  659,   75,   73,  346,  659,   75,   75,   84,  347,
       73,  659,  348,   73,   84,   84,   73,   75,   75,   75,
      349,   84,  356,  659,   75,   73,  358,  355,   84,  659,
       73,   75,   84,   84,   75,   73,  659,   75,   73,  659,
      359,  659,  659,   84,   84,   84,   75,   73,   73,  357,
       84,   75,   73,  361,  360,  363,   75,   84,  659,   75,
       84,  659,   73,   84,  659,  362,   73,   73,   75,   75,
       73,  364,   84,   75,  365,   73,  659,   84,  366,  367,
       73,   73,   84,   75,   73,   84,   73,   75,   75,  369,
      659,   75,  370,  368,   84,   84,   75,  371,  659,   84,

       73,   75,   75,   73,  659,   75,  659,   75,  376,   84,
      659,  374,  659,   84,   84,   73,   73,   84,   73,  372,
       73,   75,   84,  373,   75,  375,  659,   84,   84,  659,
       73,   84,   73,   84,   73,   73,   75,   75,  377,   75,
      659,   75,  378,   73,  659,   73,  659,   84,   73,  659,
       84,   75,   73,   75,   73,   75,   75,   73,  659,   73,
      659,  379,   84,   84,   75,   84,   75,   84,  380,   75,
      382,  381,   73,   75,  659,   75,   73,   84,   75,   84,
       75,   84,   84,  386,  385,  383,   73,   73,   73,  384,
       84,   73,   84,   75,  387,   84,   73,   75,  659,   84,

       73,   84,  659,  388,   84,  659,   84,   75,   75,   75,
       73,  659,   75,  659,  659,  391,   73,   75,  392,   84,
      659,   75,  659,   84,  389,  659,  659,   73,  390,   73,
       73,   75,  393,   84,   84,   84,  659,   75,   84,   73,
      659,  394,  659,   84,   73,   73,  395,   84,   75,  659,
       75,   75,  396,  659,  397,  659,  659,   84,   73,   73,
       75,  399,   73,   84,   73,   75,   75,   73,   73,   73,
      398,  659,  659,  659,   84,  400,   84,   84,  659,   75,
       75,  402,   73,   75,  659,   75,   84,   73,   75,   75,
       75,   84,   84,  403,  404,  659,  659,   73,  659,  401,

       73,   73,  659,   75,   73,   84,   84,  659,   75,   84,
      659,   84,   73,  659,   84,   84,   84,  407,   75,  405,
      406,   75,   75,  659,   73,   75,  659,  659,  659,   84,
      659,   73,   73,   75,   84,  409,  659,  408,  659,   73,
       73,   73,  659,  659,   84,   75,   73,   84,   84,  410,
      659,   84,   75,   75,  413,  659,  659,  412,  659,   84,
       75,   75,   75,  659,  411,  659,  659,   75,   73,  659,
       73,   84,  659,  659,   73,   73,   73,  414,   84,   84,
      659,  659,   73,  357,  359,  659,   84,   84,   84,   75,
      418,   75,  416,   84,  415,   75,   75,   75,   73,  659,

      659,  659,  419,   75,  417,  659,  659,  659,  659,   73,
       73,  659,  368,   73,  659,   84,   73,   84,  659,   75,
      365,   84,   84,   84,  420,   73,  421,  369,  423,   84,
       75,   75,  422,   73,   75,  659,  659,   75,  424,  659,
      659,   73,  659,   73,  659,   84,   75,   73,   73,   73,
      659,  659,  659,  659,   75,  659,   84,   84,  659,  659,
       84,  426,   75,   84,   75,  425,   73,  659,   75,   75,
       75,  428,   84,  659,  427,  659,  378,   73,  659,  377,
       84,   73,   73,  659,  659,   73,   73,   75,   84,   73,
       84,  659,  659,  659,   84,   84,   84,   73,   75,  379,

      380,  429,   75,   75,  381,  430,   75,   75,  659,   73,
       75,  659,  659,   84,  384,  659,  431,  659,   75,   73,
      659,   73,  659,  659,   84,   73,  659,   73,   84,   84,
       75,  432,   84,   84,   73,  659,   84,   73,  434,  659,
       75,  437,   75,  433,   84,  659,   75,  435,   75,  438,
       73,  659,   73,  436,   73,   75,   84,   73,   75,  659,
      659,  659,   73,  659,  659,  659,   84,   73,   84,  659,
      439,   75,   84,   75,   84,   75,  659,   73,   75,  397,
      659,   84,  395,   75,   84,  440,  441,   73,   75,   73,
       73,   73,   73,  443,  659,  659,  659,   84,   75,   84,

      442,   84,  659,  659,   84,  659,  444,  450,   75,   84,
       75,   75,   75,   75,   84,  402,  445,  404,  401,   73,
       73,  453,   73,  454,   84,   73,  451,   73,  457,  452,
      455,  659,  659,   73,   84,   73,   84,   84,   84,   84,
       75,   75,   73,   75,   73,  659,   75,   73,   75,  659,
      456,  659,  459,  458,   75,  659,   75,   73,   73,  659,
      659,  659,   73,   75,   73,   75,   84,   84,   75,   84,
      460,   73,   84,  461,   84,   73,  462,   73,   75,   75,
       84,  463,   84,   75,  659,   75,  465,   73,  464,   84,
      659,   84,   75,   73,   84,  659,   75,  659,   75,   73,

       73,  659,   73,  466,   84,   84,   73,   73,   75,   84,
       73,   84,  659,  659,   75,   73,  467,   73,   84,  469,
       75,   75,   84,   75,   84,  472,  468,   75,   75,  473,
       73,   75,  659,  471,   84,   73,   75,  659,   75,   73,
       84,  470,   73,  659,   73,   73,   84,   84,  659,   84,
      659,   75,  659,   84,   84,   73,   75,   84,  475,   73,
       75,  659,   84,   75,   84,   75,   75,   73,  659,  474,
      659,  476,  477,   73,  659,   73,   75,   84,   73,  659,
       75,  478,   84,   73,   73,  659,   84,   73,   75,   84,
      484,   84,   84,  659,   75,  479,   75,   73,  480,   75,

      482,  659,   84,   73,   75,   75,   84,   73,   75,  659,
      659,   73,  481,  659,   84,   73,   73,  483,   75,   73,
       84,   73,   84,  659,   75,   84,   73,  486,   75,  485,
       84,   84,   75,  659,   84,   73,   75,   75,  489,   73,
       75,  488,   75,  487,   84,  659,  490,   75,   73,   73,
       84,   73,  659,   73,   84,   73,   75,  659,   84,   73,
       75,  659,   84,   84,   73,  659,   84,   73,   84,   75,
       75,   73,   75,   84,   75,  659,   75,  659,  659,  659,
       75,  659,   84,  659,  659,   75,   84,   73,   75,   73,
      659,  491,   75,  659,  659,   84,   84,  659,   84,  451,

       84,   73,   84,   73,  452,  492,   84,   73,   75,  494,
       75,   84,  659,  659,   84,  493,  457,  458,   84,  454,
      659,   73,   75,  495,   75,   73,  496,  659,   75,  659,
      659,   73,   73,  498,   84,  659,   84,   73,   73,  659,
      659,   73,   75,  497,   73,  659,   75,  659,   84,  659,
       84,  499,   75,   75,   84,   73,  465,  659,   75,   75,
       73,  659,   75,  659,  659,   75,  659,  500,   84,   73,
      659,  659,   84,  501,  659,  659,   75,  659,   84,   84,
       73,   75,  504,   73,   84,   84,  505,  502,   84,  503,
       75,   84,  506,   73,   73,  659,  471,  659,  470,   73,

      659,   75,   84,  508,   75,  507,  659,   84,   73,  659,
      659,  659,  509,   73,   75,   75,   84,   73,   73,  659,
       75,  477,   73,  659,   73,  659,   73,   84,  659,   75,
       84,   73,  659,   73,   75,   73,  659,  659,   75,   75,
       84,   84,   73,   75,  510,   75,   84,   75,  511,  514,
      659,  659,   75,   73,   75,   84,   75,  512,  513,  659,
       84,  516,  659,   75,   84,   84,  659,  659,  659,   84,
       73,   84,  515,   84,   75,  528,  490,   73,   84,  519,
       84,   73,   84,  518,  659,  488,   73,  487,  517,   84,
       73,   75,   73,   73,  529,   73,  659,  659,   75,   73,

       84,   73,   75,  659,   73,  531,  659,   75,  659,  659,
      659,   75,  659,   75,   75,   73,   75,   84,  530,  659,
       75,  659,   75,   73,   84,   75,   73,  535,   84,  533,
      534,  532,  537,   84,   73,  536,   75,   84,   73,   84,
       84,  659,   84,   73,   75,  659,   84,   75,   84,  659,
       73,   84,  659,  659,   73,   75,   73,  539,   73,   75,
      659,  542,   84,   73,   75,   73,  540,  659,   73,  538,
       84,   75,  659,   84,  541,   75,  659,   75,   73,   75,
      659,   84,  659,  659,   75,   84,   75,  544,   73,   75,
       84,  659,  546,  543,  547,   73,  545,   84,   73,   75,

       73,   84,   73,   84,  549,   84,   73,   73,  548,   75,
       84,   73,   84,  659,  659,   84,   75,   73,   73,   75,
      659,   75,   73,   75,  659,   84,  659,   75,   75,  550,
       73,   73,   75,  554,  552,   84,  551,  659,   75,   75,
      555,  553,   84,   75,  659,   84,  558,   84,  659,   84,
       73,   75,   75,   84,   84,  556,  557,  659,   84,   73,
       73,   73,  659,   73,   84,   84,   73,   73,  659,   84,
       73,   75,   73,  659,   73,  659,  659,   84,   84,   73,
       75,   75,   75,   73,   75,  659,  659,   75,   75,  659,
       73,   75,  659,   75,  659,   75,  528,   84,  659,  659,

       75,  659,   73,   73,   75,  659,   84,   84,   84,  560,
       84,   75,   73,   84,   84,  563,  559,   84,   73,   84,
      562,   84,  561,   75,   75,  530,   84,  532,  659,  659,
       84,  564,   73,   75,  537,  565,  659,   84,  566,   75,
       73,   73,   73,   73,  659,  538,  567,  569,   73,   84,
       84,  659,   73,   75,  568,   73,  659,  570,  659,   84,
      659,   75,   75,   75,   75,   84,  659,  659,  659,   75,
      659,   73,  571,   75,  659,   73,   75,  545,  659,   84,
       73,  659,  659,  572,   73,   73,  659,   84,   84,   84,
       84,  549,   75,  659,  659,   84,   75,  573,   73,   84,

       73,   75,   84,   73,  552,   75,   75,  574,  551,  659,
      659,  575,  583,   73,  553,  576,   73,  659,   84,   75,
       73,   75,   84,   73,   75,   73,  659,   84,   73,  578,
      555,   84,   84,   73,   75,  659,   73,   75,  577,  659,
      585,   75,  584,   73,   75,   84,   75,   84,   73,   75,
       84,  659,  659,  659,   75,   73,  587,   75,  586,  588,
       84,   73,  659,   84,   75,   73,   73,   84,  591,   75,
       84,   73,   84,  589,  590,   84,   75,   73,   73,   73,
       84,  592,   75,   84,   73,  659,   75,   75,  594,   73,
       84,  659,   75,  595,  593,   84,   73,  659,   75,   75,

       75,   73,   84,  659,  659,   75,  598,   73,   84,   73,
       75,  597,   84,   84,   73,  659,   73,   75,   84,  596,
      659,  659,   75,   73,   84,   84,   84,  659,   75,  659,
       75,   84,   73,  659,   73,   75,   84,   75,   73,  659,
      659,  600,  599,   84,   75,   73,  601,   73,   84,  659,
      602,   73,  659,   75,   84,   75,   84,   73,  659,   75,
      659,   84,   73,   84,  659,  659,   75,   73,   75,   73,
       84,  659,   75,  659,   73,  603,  659,  659,   75,   84,
       73,   84,   73,   75,  659,   84,  605,  659,   75,   73,
       75,  659,   84,  659,   84,   75,   73,  659,   84,  604,

      659,   75,  659,   75,   84,  606,  607,  659,  608,   84,
       75,  659,  591,  609,   84,  659,   84,   75,  592,  659,
       73,   84,  659,  610,   73,   73,  594,   84,  659,   84,
       73,   73,  595,  659,   73,  659,   84,   73,   73,  659,
      593,   75,  659,   84,   73,   75,   75,   73,  612,  611,
      659,   75,   75,  659,  597,   75,  616,  659,   75,   75,
      659,   73,  659,  659,  659,   75,  659,   84,   75,   73,
      659,   84,   84,  618,  621,  617,  600,   84,   84,  620,
       73,   84,   75,  619,   84,   84,  613,  614,   73,  615,
       75,   84,   73,   73,   84,  659,  623,  622,   73,   73,

       73,   75,   73,  659,   73,   73,  659,  659,   84,   75,
       73,   73,   73,   75,   75,   73,   84,  659,  659,   75,
       75,   75,   73,   75,  659,   75,   75,   84,  659,  659,
      659,   75,   75,   75,   73,   84,   75,  628,  624,   84,
       84,  625,   73,   75,   73,   84,   84,   84,  659,   84,
      626,   84,   84,   73,  627,   75,   73,   84,   84,   84,
      659,  629,   84,   75,   73,   75,   73,  659,  659,   84,
      659,   73,   73,  659,   75,  659,   73,   75,  630,  659,
       73,   84,  659,  631,   73,   75,   73,   75,   73,   84,
      659,   84,   75,   75,  659,  659,  633,   75,  632,  659,

       84,   75,  659,   84,  659,   75,  659,   75,  620,   75,
      659,   84,  659,   84,  622,  637,  623,   73,   84,   84,
      634,  636,   73,   84,   73,  638,  659,   84,  628,   73,
      625,   84,   73,   84,   73,   84,  635,   73,   75,   73,
      639,   73,  626,   75,   73,   75,   73,  640,  659,   73,
       75,  659,   73,   75,   73,   75,   73,  659,   75,  641,
       75,  659,   75,  659,   84,   75,   73,   75,  659,   84,
       75,   84,  659,   75,   73,   75,   84,   75,  659,   84,
      642,   84,  659,  659,   84,  659,   84,   75,   84,  659,
       73,   84,  659,   84,  659,   75,   84,   73,  637,   84,

      644,   84,   73,   84,  645,   73,   73,   73,  641,   73,
      643,   75,   73,   84,   73,  638,  646,   73,   75,   73,
       73,   84,  659,   75,   73,  659,   75,   75,   75,  659,
       75,  659,  642,   75,   73,   75,   73,   84,   75,   73,
       75,   75,  659,  647,   84,   75,  648,   73,  652,   84,
      659,   73,   84,   84,   84,   75,   84,   75,  651,   84,
       75,   84,  659,  655,   84,  659,   84,   84,   75,  659,
      659,   84,   75,  659,   73,   73,  649,  659,  650,   73,
      648,   84,   73,   84,  656,  659,   84,  659,  653,  659,
      654,  655,  659,  659,   84,   75,   75,  659,   84,  659,

       75,  659,  659,   75,  659,  659,  659,  659,  659,  659,
      659,  658,  659,  657,  659,  659,  659,  659,  659,  659,
      659,   84,   84,  659,  659,  659,   84,  659,  659,   84,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      658,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   74,  659,
      659,  659,  659,  659,   74,  659,   74,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  333,  659,  333,
      333,  659,  333,  338,  338,  338,  338,  351,  659,  659,

      659,  351,  659,  351,  353,  659,  353,  659,  353,  522,
      659,  659,  522,  659,  522,  524,  524,  524,    3,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659

    } ;

static yyconst flex_int16_t yy_chk[3294] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   14,   16,   16,   26,   37,   19,
      674,   71,  673,   71,  668,   14,   71,   14,   14,  214,
       22,   21,  667,  215,  666,   73,  665,   14,   26,   37,

       19,   37,   20,   19,   19,   20,  582,   19,   20,   23,
       24,   22,   21,   19,   21,   19,   73,   14,   19,   19,
       19,   22,   14,   20,   26,   37,   19,   22,   21,   20,
       23,   24,   25,  214,  215,  202,   20,   22,   21,   20,
       27,   24,  341,   23,   20,   23,   28,   24,  331,   20,
      339,  580,   24,   25,   23,  526,   23,   24,  521,   25,
       43,   27,  520,   29,   34,  202,  342,   28,   27,   28,
      351,   30,  341,  331,   25,  339,   27,   28,  336,   25,
       27,   43,   32,   28,   29,   34,   29,   27,  521,  201,
      196,   34,   30,   28,   30,   34,   31,  447,   30,   31,

       29,  353,   31,   32,   33,   32,   34,   43,   30,   35,
       29,   34,   75,   30,  351,   72,   43,   31,   30,   32,
      448,   32,   43,   36,   31,   33,  354,   33,   68,   32,
       35,   33,   31,   74,   31,   31,   40,   31,   31,   35,
      447,   38,  353,   31,   36,   42,   35,   39,   35,  448,
       39,   33,   66,   39,   74,   35,   35,   40,   44,   36,
      352,   49,   38,   36,   38,   64,   42,  354,   39,   45,
       36,   38,   38,   63,  524,   41,  527,   46,   41,   44,
       74,   41,   49,   40,   39,   40,   40,  522,   38,   40,
       45,   48,   42,   42,   39,   40,   41,   40,   46,   47,

       40,   40,   40,  524,  352,   44,  527,   42,   49,   49,
       62,   50,   48,  446,   61,  446,   45,   44,  446,   44,
       47,   60,   41,   49,   46,   45,   18,   41,   44,   46,
      522,   45,   50,   52,   41,   53,   45,   41,   48,   48,
      200,  523,   41,  200,   46,   51,   47,   48,   51,   54,
      198,   51,   47,   48,   52,   55,   53,  333,   50,   50,
       47,  198,  525,   50,   47,   17,   51,   56,  333,  199,
       54,  338,  200,   50,  338,   15,   55,   13,   50,  199,
       52,   52,   53,   53,  523,   12,   57,   53,   56,   11,
      579,  525,   51,  198,   58,   52,   54,   52,   51,  199,

      333,   54,   55,  338,  199,   54,   51,   57,   51,   51,
       55,   51,   51,    9,   56,   58,   54,   55,   59,   55,
      579,   59,   76,   77,   59,   78,   55,    8,   56,    3,
        0,   80,   56,   57,   57,   81,    0,   79,   83,   59,
       69,   58,   58,   76,   77,    0,   78,    0,   77,   58,
       58,   69,   80,   69,   69,   82,   81,   80,   79,   83,
       81,  340,   76,   69,  340,   59,   78,    0,   79,   76,
       77,   79,   78,   84,   81,   87,   82,   88,   80,   83,
       59,    0,   81,   69,   79,   83,   89,   90,   69,   91,
       92,    0,   93,  340,   84,   82,   87,   94,   88,    0,

       95,  449,   82,  449,   87,    0,  449,   89,   90,   96,
       91,   92,   89,   93,   88,   90,    0,   97,   94,    0,
       84,   95,   87,    0,   88,   92,   92,   90,   98,   91,
       96,   99,   93,   89,   90,   96,   91,   92,   97,   93,
       95,   94,  102,    0,   94,  100,  101,   95,   97,   98,
       96,  103,   99,  104,  581,  105,   96,    0,  108,  106,
      334,    0,   98,  102,   97,  102,  100,  101,    0,    0,
       99,  334,  103,  107,  104,   98,  105,    0,   99,  108,
      106,  100,  101,  106,  581,    0,  109,  110,    0,  102,
      104,  111,  100,  101,  107,  108,  112,  107,  103,    0,

      104,  114,  105,  334,    0,  108,  106,  109,  110,  107,
      113,  115,  111,  110,    0,  116,  118,  112,  117,    0,
      107,  122,  114,  119,  109,  120,    0,  111,    0,  121,
        0,  113,  115,  109,  110,  114,  116,  118,  111,  117,
      112,  112,  122,  112,  119,  117,  120,    0,  114,  113,
      121,  113,  123,  119,  121,    0,  124,  113,  115,  125,
      122,  126,  116,  118,  127,  117,  120,    0,  122,  129,
      119,    0,  120,  123,    0,    0,  121,  124,    0,    0,
      125,  128,  126,    0,  125,  127,  130,    0,  125,  123,
      129,  131,  124,  127,  125,  126,  129,  125,  132,  123,

      125,  133,  128,  124,  126,  128,  125,  130,  126,  136,
      134,  127,  131,  135,  131,    0,  129,    0,  138,  132,
      137,    0,  133,  139,    0,  140,    0,    0,  128,  141,
      136,  134,  133,  130,  135,    0,  132,  134,  131,  138,
      136,  137,  133,    0,  139,  132,  140,  137,  133,    0,
      141,  137,  135,  142,  143,    0,  136,  134,    0,  138,
      135,  144,  139,    0,  145,  138,    0,  137,  146,    0,
      139,  147,  140,  148,  142,  143,  141,  149,  150,  141,
        0,    0,  144,  151,  152,  145,    0,    0,  154,  146,
      140,    0,  147,    0,  148,  153,  155,    0,  149,  150,

      142,  143,    0,    0,  151,  152,    0,    0,  144,  154,
      143,  145,  144,  143,  145,  146,  153,  155,  147,  142,
      148,    0,    0,  156,  149,  150,  157,  148,  145,  150,
      151,  152,    0,  146,    0,  154,  151,  147,  158,  149,
      159,    0,  153,  155,  156,    0,  160,  157,  151,  152,
      161,  162,    0,  154,  163,  153,  153,  164,  165,  158,
        0,  159,  167,    0,    0,  155,    0,  160,  166,  168,
      156,  161,  162,  157,  169,  163,    0,  157,  164,  165,
        0,    0,    0,  167,    0,  158,    0,  159,  156,  166,
      168,    0,  157,  160,  158,  169,    0,  161,  162,  159,

        0,  163,  163,    0,  164,  165,  170,  165,    0,  167,
      160,  161,  162,  171,  172,  166,  168,  166,  173,  164,
        0,  169,  174,  176,  167,  169,  175,  170,  178,  166,
        0,    0,  168,    0,  171,  172,    0,  177,  179,  173,
        0,  180,    0,  174,  176,    0,    0,  175,    0,  178,
      182,  181,    0,  170,    0,    0,    0,    0,  177,  179,
      171,  172,  180,    0,    0,  173,    0,  170,    0,  174,
      176,  182,  181,  175,  174,  178,    0,  173,  172,    0,
      172,  175,  171,  171,  177,  179,  183,  177,  180,  176,
        0,  186,  178,    0,  184,  185,    0,  182,  181,  187,

      179,  181,  180,  188,  189,  181,  190,  183,  191,  182,
      193,  181,  186,  194,  181,  184,  185,  181,  182,    0,
      187,    0,    0,    0,  188,  189,    0,  190,  192,  191,
        0,  193,    0,  183,  194,    0,    0,    0,  186,  186,
      183,  184,  185,  184,  204,  205,  187,  185,  335,  192,
      188,  189,  206,  190,    0,  191,  189,  193,  335,  188,
      194,  208,  187,    0,  191,  204,  205,  207,  209,  188,
      190,    0,  205,  206,  210,  192,  193,  194,  335,  206,
      192,  213,  208,  335,  192,  212,  211,    0,  207,  209,
      207,  204,  205,    0,    0,  210,  216,  217,  219,  206,

        0,    0,  213,  218,  210,    0,  212,  211,  208,  211,
      220,    0,  212,  221,  207,  209,  222,  216,  217,  219,
      213,  210,  217,    0,  218,  223,  219,  216,  213,    0,
      224,  220,  212,  211,  221,  225,    0,  222,  227,    0,
      221,    0,    0,  216,  217,  219,  223,  226,  228,  218,
      218,  224,  229,  223,  222,  224,  225,  220,    0,  227,
      221,    0,  230,  222,    0,  223,  231,  232,  226,  228,
      233,  225,  223,  229,  226,  238,    0,  224,  226,  228,
      234,  235,  225,  230,  236,  227,  237,  231,  232,  230,
        0,  233,  232,  229,  226,  228,  238,  233,    0,  229,

      239,  234,  235,  240,    0,  236,    0,  237,  238,  230,
        0,  236,    0,  231,  232,  241,  242,  233,  243,  234,
      244,  239,  238,  235,  240,  237,    0,  234,  235,    0,
      245,  236,  246,  237,  247,  248,  241,  242,  239,  243,
        0,  244,  242,  249,    0,  250,    0,  239,  252,    0,
      240,  245,  251,  246,  254,  247,  248,  255,    0,  253,
        0,  244,  241,  242,  249,  243,  250,  244,  247,  252,
      249,  248,  256,  251,    0,  254,  257,  245,  255,  246,
      253,  247,  248,  254,  253,  251,  259,  258,  260,  252,
      249,  261,  250,  256,  255,  252,  262,  257,    0,  251,

      263,  254,    0,  256,  255,    0,  253,  259,  258,  260,
      264,    0,  261,    0,    0,  260,  265,  262,  261,  256,
        0,  263,    0,  257,  258,    0,    0,  266,  259,  267,
      268,  264,  262,  259,  258,  260,    0,  265,  261,  269,
        0,  263,    0,  262,  270,  272,  264,  263,  266,    0,
      267,  268,  265,    0,  266,    0,    0,  264,  271,  273,
      269,  268,  275,  265,  274,  270,  272,  276,  277,  278,
      267,    0,    0,    0,  266,  270,  267,  268,    0,  271,
      273,  272,  279,  275,    0,  274,  269,  280,  276,  277,
      278,  270,  272,  273,  274,    0,    0,  281,    0,  271,

      282,  283,    0,  279,  284,  271,  273,    0,  280,  275,
        0,  274,  285,    0,  276,  277,  278,  278,  281,  276,
      277,  282,  283,    0,  286,  284,    0,    0,    0,  279,
        0,  288,  287,  285,  280,  280,    0,  279,    0,  289,
      290,  291,    0,    0,  281,  286,  294,  282,  283,  281,
        0,  284,  288,  287,  284,    0,    0,  283,    0,  285,
      289,  290,  291,    0,  282,    0,    0,  294,  292,    0,
      293,  286,    0,    0,  298,  295,  297,  286,  288,  287,
        0,    0,  296,  285,  287,    0,  289,  290,  291,  292,
      290,  293,  289,  294,  288,  298,  295,  297,  299,    0,

        0,    0,  291,  296,  289,    0,    0,    0,    0,  300,
      301,    0,  294,  302,    0,  292,  303,  293,    0,  299,
      292,  298,  295,  297,  292,  304,  293,  295,  297,  296,
      300,  301,  296,  305,  302,    0,    0,  303,  298,    0,
        0,  306,    0,  307,    0,  299,  304,  309,  310,  308,
        0,    0,    0,    0,  305,    0,  300,  301,    0,    0,
      302,  300,  306,  303,  307,  299,  311,    0,  309,  310,
      308,  302,  304,    0,  301,    0,  304,  312,    0,  303,
      305,  313,  314,    0,    0,  315,  316,  311,  306,  317,
      307,    0,    0,    0,  309,  310,  308,  318,  312,  305,

      306,  308,  313,  314,  307,  309,  315,  316,    0,  319,
      317,    0,    0,  311,  310,    0,  311,    0,  318,  320,
        0,  321,    0,    0,  312,  322,    0,  323,  313,  314,
      319,  312,  315,  316,  324,    0,  317,  325,  314,    0,
      320,  317,  321,  313,  318,    0,  322,  315,  323,  318,
      326,    0,  327,  316,  328,  324,  319,  329,  325,    0,
        0,    0,  330,    0,    0,    0,  320,  343,  321,    0,
      319,  326,  322,  327,  323,  328,    0,  347,  329,  323,
        0,  324,  321,  330,  325,  320,  322,  344,  343,  345,
      346,  348,  355,  325,    0,    0,    0,  326,  347,  327,

      324,  328,    0,    0,  329,    0,  326,  343,  344,  330,
      345,  346,  348,  355,  343,  328,  329,  330,  327,  349,
      356,  346,  357,  347,  347,  358,  344,  359,  355,  345,
      348,    0,    0,  360,  344,  362,  345,  346,  348,  355,
      349,  356,  361,  357,  363,    0,  358,  364,  359,    0,
      349,    0,  358,  356,  360,    0,  362,  365,  366,    0,
        0,    0,  367,  361,  368,  363,  349,  356,  364,  357,
      360,  369,  358,  361,  359,  370,  362,  377,  365,  366,
      360,  363,  362,  367,    0,  368,  366,  371,  364,  361,
        0,  363,  369,  372,  364,    0,  370,    0,  377,  374,

      373,    0,  375,  367,  365,  366,  376,  378,  371,  367,
      379,  368,    0,    0,  372,  380,  370,  381,  369,  372,
      374,  373,  370,  375,  377,  375,  371,  376,  378,  376,
      382,  379,    0,  374,  371,  383,  380,    0,  381,  384,
      372,  373,  387,    0,  385,  386,  374,  373,    0,  375,
        0,  382,    0,  376,  378,  388,  383,  379,  383,  389,
      384,    0,  380,  387,  381,  385,  386,  393,    0,  382,
        0,  385,  386,  390,    0,  391,  388,  382,  392,    0,
      389,  387,  383,  394,  395,    0,  384,  396,  393,  387,
      393,  385,  386,    0,  390,  388,  391,  397,  389,  392,

      391,    0,  388,  398,  394,  395,  389,  399,  396,    0,
        0,  401,  390,    0,  393,  400,  402,  392,  397,  403,
      390,  404,  391,    0,  398,  392,  405,  396,  399,  394,
      394,  395,  401,    0,  396,  406,  400,  402,  400,  407,
      403,  399,  404,  398,  397,    0,  403,  405,  409,  408,
      398,  410,    0,  411,  399,  412,  406,    0,  401,  413,
      407,    0,  400,  402,  415,    0,  403,  417,  404,  409,
      408,  414,  410,  405,  411,    0,  412,    0,    0,    0,
      413,    0,  406,    0,    0,  415,  407,  416,  417,  418,
        0,  405,  414,    0,    0,  409,  408,    0,  410,  406,

      411,  419,  412,  420,  407,  408,  413,  421,  416,  411,
      418,  415,    0,    0,  417,  410,  412,  413,  414,  409,
        0,  422,  419,  414,  420,  423,  415,    0,  421,    0,
        0,  424,  425,  417,  416,    0,  418,  426,  427,    0,
        0,  429,  422,  416,  428,    0,  423,    0,  419,    0,
      420,  418,  424,  425,  421,  430,  420,    0,  426,  427,
      431,    0,  429,    0,    0,  428,    0,  419,  422,  432,
        0,    0,  423,  421,    0,    0,  430,    0,  424,  425,
      433,  431,  424,  434,  426,  427,  427,  422,  429,  423,
      432,  428,  428,  435,  436,    0,  426,    0,  425,  437,

        0,  433,  430,  430,  434,  429,    0,  431,  438,    0,
        0,    0,  431,  439,  435,  436,  432,  440,  441,    0,
      437,  432,  442,    0,  445,    0,  443,  433,    0,  438,
      434,  444,    0,  451,  439,  450,    0,    0,  440,  441,
      435,  436,  452,  442,  433,  445,  437,  443,  434,  437,
        0,    0,  444,  453,  451,  438,  450,  435,  436,    0,
      439,  439,    0,  452,  440,  441,    0,    0,    0,  442,
      454,  445,  438,  443,  453,  450,  445,  455,  444,  444,
      451,  456,  450,  441,    0,  443,  457,  442,  440,  452,
      458,  454,  459,  460,  453,  464,    0,    0,  455,  463,

      453,  461,  456,    0,  462,  456,    0,  457,    0,    0,
        0,  458,    0,  459,  460,  465,  464,  454,  455,    0,
      463,    0,  461,  466,  455,  462,  467,  462,  456,  460,
      461,  459,  464,  457,  469,  463,  465,  458,  470,  459,
      460,    0,  464,  468,  466,    0,  463,  467,  461,    0,
      471,  462,    0,    0,  472,  469,  474,  467,  473,  470,
        0,  469,  465,  475,  468,  477,  468,    0,  476,  466,
      466,  471,    0,  467,  468,  472,    0,  474,  478,  473,
        0,  469,    0,    0,  475,  470,  477,  473,  479,  476,
      468,    0,  475,  472,  476,  480,  474,  471,  481,  478,

      482,  472,  483,  474,  478,  473,  484,  487,  476,  479,
      475,  488,  477,    0,    0,  476,  480,  485,  486,  481,
        0,  482,  489,  483,    0,  478,    0,  484,  487,  479,
      490,  491,  488,  483,  481,  479,  480,    0,  485,  486,
      484,  482,  480,  489,    0,  481,  489,  482,    0,  483,
      492,  490,  491,  484,  487,  485,  486,    0,  488,  493,
      494,  496,    0,  495,  485,  486,  497,  498,    0,  489,
      499,  492,  500,    0,  501,    0,    0,  490,  491,  502,
      493,  494,  496,  505,  495,    0,    0,  497,  498,    0,
      503,  499,    0,  500,    0,  501,  491,  492,    0,    0,

      502,    0,  504,  506,  505,    0,  493,  494,  496,  494,
      495,  503,  507,  497,  498,  498,  492,  499,  508,  500,
      497,  501,  496,  504,  506,  493,  502,  495,    0,    0,
      505,  499,  509,  507,  500,  502,    0,  503,  503,  508,
      510,  511,  512,  513,    0,  501,  503,  505,  514,  504,
      506,    0,  517,  509,  504,  515,    0,  506,    0,  507,
        0,  510,  511,  512,  513,  508,    0,    0,    0,  514,
        0,  516,  508,  517,    0,  518,  515,  507,    0,  509,
      519,    0,    0,  509,  528,  529,    0,  510,  511,  512,
      513,  510,  516,    0,    0,  514,  518,  509,  530,  517,

      531,  519,  515,  532,  513,  528,  529,  511,  512,    0,
        0,  515,  529,  533,  514,  517,  534,    0,  516,  530,
      535,  531,  518,  536,  532,  537,    0,  519,  538,  519,
      516,  528,  529,  540,  533,    0,  539,  534,  518,    0,
      533,  535,  531,  541,  536,  530,  537,  531,  543,  538,
      532,    0,    0,    0,  540,  542,  535,  539,  534,  536,
      533,  544,    0,  534,  541,  545,  546,  535,  541,  543,
      536,  548,  537,  539,  540,  538,  542,  547,  549,  550,
      540,  542,  544,  539,  551,    0,  545,  546,  544,  552,
      541,    0,  548,  546,  543,  543,  553,    0,  547,  549,

      550,  554,  542,    0,    0,  551,  550,  555,  544,  557,
      552,  548,  545,  546,  556,    0,  558,  553,  548,  547,
        0,    0,  554,  559,  547,  549,  550,    0,  555,    0,
      557,  551,  560,    0,  561,  556,  552,  558,  562,    0,
        0,  556,  554,  553,  559,  563,  557,  564,  554,    0,
      558,  565,    0,  560,  555,  561,  557,  566,    0,  562,
        0,  556,  567,  558,    0,    0,  563,  568,  564,  569,
      559,    0,  565,    0,  570,  559,    0,    0,  566,  560,
      571,  561,  572,  567,    0,  562,  561,    0,  568,  573,
      569,    0,  563,    0,  564,  570,  574,    0,  565,  560,

        0,  571,    0,  572,  566,  562,  563,    0,  564,  567,
      573,    0,  567,  565,  568,    0,  569,  574,  568,    0,
      575,  570,    0,  566,  576,  577,  570,  571,    0,  572,
      578,  583,  571,    0,  584,    0,  573,  585,  587,    0,
      569,  575,    0,  574,  586,  576,  577,  588,  574,  572,
        0,  578,  583,    0,  573,  584,  583,    0,  585,  587,
        0,  589,    0,    0,    0,  586,    0,  575,  588,  590,
        0,  576,  577,  585,  588,  584,  576,  578,  583,  587,
      591,  584,  589,  586,  585,  587,  575,  577,  592,  578,
      590,  586,  593,  594,  588,    0,  590,  589,  595,  596,

      597,  591,  598,    0,  599,  600,    0,    0,  589,  592,
      602,  603,  604,  593,  594,  601,  590,    0,    0,  595,
      596,  597,  605,  598,    0,  599,  600,  591,    0,    0,
        0,  602,  603,  604,  606,  592,  601,  602,  596,  593,
      594,  598,  607,  605,  608,  595,  596,  597,    0,  598,
      599,  599,  600,  609,  601,  606,  611,  602,  603,  604,
        0,  603,  601,  607,  610,  608,  612,    0,    0,  605,
        0,  613,  614,    0,  609,    0,  615,  611,  604,    0,
      616,  606,    0,  605,  618,  610,  620,  612,  617,  607,
        0,  608,  613,  614,    0,    0,  608,  615,  606,    0,

      609,  616,    0,  611,    0,  618,    0,  620,  607,  617,
        0,  610,    0,  612,  609,  617,  610,  619,  613,  614,
      611,  616,  621,  615,  622,  618,    0,  616,  615,  623,
      612,  618,  624,  620,  625,  617,  614,  626,  619,  627,
      619,  628,  613,  621,  629,  622,  630,  621,    0,  631,
      623,    0,  632,  624,  633,  625,  634,    0,  626,  624,
      627,    0,  628,    0,  619,  629,  635,  630,    0,  621,
      631,  622,    0,  632,  636,  633,  623,  634,    0,  624,
      627,  625,    0,    0,  626,    0,  627,  635,  628,    0,
      637,  629,    0,  630,    0,  636,  631,  638,  630,  632,

      632,  633,  639,  634,  633,  640,  641,  642,  634,  643,
      629,  637,  644,  635,  645,  631,  636,  647,  638,  646,
      648,  636,    0,  639,  649,    0,  640,  641,  642,    0,
      643,    0,  635,  644,  650,  645,  651,  637,  647,  653,
      646,  648,    0,  639,  638,  649,  640,  652,  647,  639,
        0,  654,  640,  641,  642,  650,  643,  651,  646,  644,
      653,  645,    0,  651,  647,    0,  646,  648,  652,    0,
        0,  649,  654,    0,  655,  656,  643,    0,  644,  657,
      645,  650,  658,  651,  652,    0,  653,    0,  649,    0,
      650,  653,    0,    0,  652,  655,  656,    0,  654,    0,

      657,    0,    0,  658,    0,    0,    0,    0,    0,    0,
        0,  656,    0,  654,    0,    0,    0,    0,    0,    0,
        0,  655,  656,    0,    0,    0,  657,    0,    0,  658,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      657,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  663,    0,
        0,    0,    0,    0,  663,    0,  663,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  669,    0,  669,
      669,    0,  669,  670,  670,  670,  670,  671,    0,    0,

        0,  671,    0,  671,  672,    0,  672,    0,  672,  675,
        0,    0,  675,    0,  675,  676,  676,  676,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[93] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/VHDLLexerRule.l"
#line 8 "src/VHDLLexerRule.l"
	#include "LexerContext.hpp"
	#include <stdio.h>
	#include <iostream>
	#include <string.h>
	#include <utility>
	#include <vector>
	#include <ctype.h>
	#include <map>

	#define YY_EXTRA_TYPE LexerContext*
	#define YY_INPUT(buf, result, max_size) {\
		char c; \
		(*yyextra->is).get(c); \
		if (yyextra->is->eof()) \
			result = YY_NULL; \
		else { \
			buf[0] = c; \
			result = 1; \
		}\
	}


#line 1444 "src/VHDLLexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int Flopoco_lex_init (yyscan_t* scanner);

int Flopoco_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int Flopoco_lex_destroy (yyscan_t yyscanner );

int Flopoco_get_debug (yyscan_t yyscanner );

void Flopoco_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE Flopoco_get_extra (yyscan_t yyscanner );

void Flopoco_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *Flopoco_get_in (yyscan_t yyscanner );

void Flopoco_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *Flopoco_get_out (yyscan_t yyscanner );

void Flopoco_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t Flopoco_get_leng (yyscan_t yyscanner );

char *Flopoco_get_text (yyscan_t yyscanner );

int Flopoco_get_lineno (yyscan_t yyscanner );

void Flopoco_set_lineno (int _line_number ,yyscan_t yyscanner );

int Flopoco_get_column  (yyscan_t yyscanner );

void Flopoco_set_column (int _column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int Flopoco_wrap (yyscan_t yyscanner );
#else
extern int Flopoco_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int Flopoco_lex (yyscan_t yyscanner);

#define YY_DECL int Flopoco_lex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			Flopoco_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				Flopoco__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		Flopoco__load_buffer_state(yyscanner );
		}

	{
#line 55 "src/VHDLLexerRule.l"


#line 1708 "src/VHDLLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 660 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3219 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
#line 58 "src/VHDLLexerRule.l"
case 2:
#line 59 "src/VHDLLexerRule.l"
case 3:
#line 60 "src/VHDLLexerRule.l"
case 4:
#line 61 "src/VHDLLexerRule.l"
case 5:
#line 62 "src/VHDLLexerRule.l"
case 6:
#line 63 "src/VHDLLexerRule.l"
case 7:
#line 64 "src/VHDLLexerRule.l"
case 8:
#line 65 "src/VHDLLexerRule.l"
case 9:
#line 66 "src/VHDLLexerRule.l"
case 10:
#line 67 "src/VHDLLexerRule.l"
case 11:
#line 68 "src/VHDLLexerRule.l"
case 12:
#line 69 "src/VHDLLexerRule.l"
case 13:
#line 70 "src/VHDLLexerRule.l"
case 14:
#line 71 "src/VHDLLexerRule.l"
case 15:
#line 72 "src/VHDLLexerRule.l"
case 16:
#line 73 "src/VHDLLexerRule.l"
case 17:
#line 74 "src/VHDLLexerRule.l"
case 18:
#line 75 "src/VHDLLexerRule.l"
case 19:
#line 76 "src/VHDLLexerRule.l"
case 20:
#line 77 "src/VHDLLexerRule.l"
case 21:
#line 78 "src/VHDLLexerRule.l"
case 22:
#line 79 "src/VHDLLexerRule.l"
case 23:
#line 80 "src/VHDLLexerRule.l"
case 24:
#line 81 "src/VHDLLexerRule.l"
case 25:
#line 82 "src/VHDLLexerRule.l"
case 26:
#line 83 "src/VHDLLexerRule.l"
case 27:
#line 84 "src/VHDLLexerRule.l"
case 28:
#line 85 "src/VHDLLexerRule.l"
case 29:
#line 86 "src/VHDLLexerRule.l"
case 30:
#line 87 "src/VHDLLexerRule.l"
case 31:
#line 88 "src/VHDLLexerRule.l"
case 32:
#line 89 "src/VHDLLexerRule.l"
case 33:
#line 90 "src/VHDLLexerRule.l"
case 34:
#line 91 "src/VHDLLexerRule.l"
case 35:
#line 92 "src/VHDLLexerRule.l"
case 36:
#line 93 "src/VHDLLexerRule.l"
case 37:
#line 94 "src/VHDLLexerRule.l"
case 38:
#line 95 "src/VHDLLexerRule.l"
case 39:
#line 96 "src/VHDLLexerRule.l"
case 40:
#line 97 "src/VHDLLexerRule.l"
case 41:
#line 98 "src/VHDLLexerRule.l"
case 42:
#line 99 "src/VHDLLexerRule.l"
case 43:
#line 100 "src/VHDLLexerRule.l"
case 44:
#line 101 "src/VHDLLexerRule.l"
case 45:
#line 102 "src/VHDLLexerRule.l"
case 46:
#line 103 "src/VHDLLexerRule.l"
case 47:
#line 104 "src/VHDLLexerRule.l"
case 48:
#line 105 "src/VHDLLexerRule.l"
case 49:
#line 106 "src/VHDLLexerRule.l"
case 50:
#line 107 "src/VHDLLexerRule.l"
case 51:
#line 108 "src/VHDLLexerRule.l"
case 52:
#line 109 "src/VHDLLexerRule.l"
case 53:
#line 110 "src/VHDLLexerRule.l"
case 54:
#line 111 "src/VHDLLexerRule.l"
case 55:
#line 112 "src/VHDLLexerRule.l"
case 56:
#line 113 "src/VHDLLexerRule.l"
case 57:
#line 114 "src/VHDLLexerRule.l"
case 58:
#line 115 "src/VHDLLexerRule.l"
case 59:
#line 116 "src/VHDLLexerRule.l"
case 60:
#line 117 "src/VHDLLexerRule.l"
case 61:
#line 118 "src/VHDLLexerRule.l"
case 62:
#line 119 "src/VHDLLexerRule.l"
case 63:
#line 120 "src/VHDLLexerRule.l"
case 64:
#line 121 "src/VHDLLexerRule.l"
case 65:
#line 122 "src/VHDLLexerRule.l"
case 66:
#line 123 "src/VHDLLexerRule.l"
case 67:
#line 124 "src/VHDLLexerRule.l"
case 68:
#line 125 "src/VHDLLexerRule.l"
case 69:
#line 126 "src/VHDLLexerRule.l"
case 70:
#line 127 "src/VHDLLexerRule.l"
case 71:
#line 128 "src/VHDLLexerRule.l"
case 72:
#line 129 "src/VHDLLexerRule.l"
case 73:
#line 130 "src/VHDLLexerRule.l"
case 74:
#line 131 "src/VHDLLexerRule.l"
case 75:
#line 132 "src/VHDLLexerRule.l"
case 76:
#line 133 "src/VHDLLexerRule.l"
case 77:
#line 134 "src/VHDLLexerRule.l"
case 78:
#line 135 "src/VHDLLexerRule.l"
case 79:
#line 136 "src/VHDLLexerRule.l"
case 80:
#line 137 "src/VHDLLexerRule.l"
case 81:
YY_RULE_SETUP
#line 137 "src/VHDLLexerRule.l"
{ (*yyextra->os) << yytext; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "src/VHDLLexerRule.l"
{ (*yyextra->os) << yytext; } 
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 145 "src/VHDLLexerRule.l"
(*yyextra->os) << yytext;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 149 "src/VHDLLexerRule.l"
{ (*yyextra->os) << "__" << yytext << "__" << (yyextra->yyTheCycle) <<"__";
								  std::pair< std::string, int> tmp;
								  tmp.first = yytext;
								  tmp.second = (yyextra->yyTheCycle);
								  yyextra->theUseTable.push_back ( tmp );		
								} 
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 156 "src/VHDLLexerRule.l"
{ (*yyextra->os) << yytext; }	
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 159 "src/VHDLLexerRule.l"
{
			(*yyextra->os) << yytext; 
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 163 "src/VHDLLexerRule.l"
{ (*yyextra->os) << yytext; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 165 "src/VHDLLexerRule.l"
{ (*yyextra->os) << yytext; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 167 "src/VHDLLexerRule.l"
{ (*yyextra->os) << yytext; }
	YY_BREAK
case 90:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 169 "src/VHDLLexerRule.l"
{
			/* comment */
			(*yyextra->os) << yytext;
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 174 "src/VHDLLexerRule.l"
(*yyextra->os) << yytext;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 176 "src/VHDLLexerRule.l"
ECHO;
	YY_BREAK
#line 2011 "src/VHDLLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * Flopoco_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( Flopoco_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of Flopoco_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Flopoco_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			Flopoco_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Flopoco_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 660 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 660 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 659);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					Flopoco_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( Flopoco_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void Flopoco_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        Flopoco_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            Flopoco__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	Flopoco__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	Flopoco__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void Flopoco__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		Flopoco_pop_buffer_state();
	 *		Flopoco_push_buffer_state(new_buffer);
     */
	Flopoco_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	Flopoco__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (Flopoco_wrap()) processing, but the only time this flag
	 * is looked at is after Flopoco_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void Flopoco__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE Flopoco__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Flopoco_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Flopoco__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Flopoco_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in Flopoco__create_buffer()" );

	b->yy_is_our_buffer = 1;

	Flopoco__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with Flopoco__create_buffer()
 * @param yyscanner The scanner object.
 */
    void Flopoco__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Flopoco_free((void *) b->yy_ch_buf ,yyscanner );

	Flopoco_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a Flopoco_restart() or at EOF.
 */
    static void Flopoco__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	Flopoco__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then Flopoco__init_buffer was _probably_
     * called from Flopoco_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void Flopoco__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		Flopoco__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void Flopoco_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	Flopoco_ensure_buffer_stack(yyscanner);

	/* This block is copied from Flopoco__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from Flopoco__switch_to_buffer. */
	Flopoco__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void Flopoco_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	Flopoco__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		Flopoco__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void Flopoco_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)Flopoco_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in Flopoco_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)Flopoco_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in Flopoco_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE Flopoco__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) Flopoco_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in Flopoco__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	Flopoco__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to Flopoco_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       Flopoco__scan_bytes() instead.
 */
YY_BUFFER_STATE Flopoco__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return Flopoco__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to Flopoco_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE Flopoco__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) Flopoco_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in Flopoco__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = Flopoco__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in Flopoco__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE Flopoco_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int Flopoco_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int Flopoco_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *Flopoco_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *Flopoco_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t Flopoco_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *Flopoco_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void Flopoco_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void Flopoco_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "Flopoco_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void Flopoco_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "Flopoco_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see Flopoco__switch_to_buffer
 */
void Flopoco_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void Flopoco_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int Flopoco_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void Flopoco_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* Flopoco_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int Flopoco_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) Flopoco_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* Flopoco_lex_init_extra has the same functionality as Flopoco_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to Flopoco_alloc in
 * the yyextra field.
 */

int Flopoco_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    Flopoco_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) Flopoco_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    Flopoco_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from Flopoco_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * Flopoco_lex_init()
     */
    return 0;
}

/* Flopoco_lex_destroy is for both reentrant and non-reentrant scanners. */
int Flopoco_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		Flopoco__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		Flopoco_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	Flopoco_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        Flopoco_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * Flopoco_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    Flopoco_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Flopoco_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *Flopoco_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Flopoco_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see Flopoco_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 176 "src/VHDLLexerRule.l"



void LexerContext::init_scanner() {
	Flopoco_lex_init(&scanner);
	Flopoco_set_extra(this,scanner);
}

void LexerContext::destroy_scanner() {
	Flopoco_lex_destroy(scanner);
}

void LexerContext::lex() {
	Flopoco_lex(scanner);
}

