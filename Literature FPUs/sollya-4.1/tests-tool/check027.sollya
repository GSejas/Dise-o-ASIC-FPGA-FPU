/* Non-regression tests for #15256 */
restart;
print("=============== Test number 1 ================");
a=17; b=0; c=abs(a)/abs(b); round(c,17,RD);
a=17; b=0; c=abs(a)/abs(b); round(c,12,RN);


/*********************************************************************************/
/* Non-regression tests for #10322*/
restart;
print("=============== Test number 2 ================");
verbosity = 2;
printsingle(round(2^2000,SG,RD));
printsingle(round(2^2000,SG,RN));
printsingle(round( (2^24-1)*2^104,SG,RN));
printsingle(round( (2^24-1)*2^104,SG,RD));
printsingle(round( (2^24-1)*2^104,SG,RU));
printsingle(round( (2^24-1/2)*2^104,SG,RD));
printsingle(round( (2^24-1/2)*2^104,SG,RN));
printsingle(round( (2^24-1/2)*2^104,SG,RU));
printsingle(round( (2^23)*2^(-149),SG,RD));
printsingle(round( (2^23)*2^(-149),SG,RN));
printsingle(round( (2^23)*2^(-149),SG,RU));
printsingle(round( (2^23-1)*2^(-149),SG,RD));
printsingle(round( (2^23-1)*2^(-149),SG,RN));
printsingle(round( (2^23-1)*2^(-149),SG,RU));
printsingle(round( (1)*2^(-149),SG,RD));
printsingle(round( (1)*2^(-149),SG,RN));
printsingle(round( (1)*2^(-149),SG,RU));
printsingle(round( (1/2)*2^(-149),SG,RD));
printsingle(round( (1/2)*2^(-149),SG,RN));
printsingle(round( (1/2)*2^(-149),SG,RU));
printsingle(round( -(2^24-1)*2^104,SG,RN));
printsingle(round( -(2^24-1)*2^104,SG,RD));
printsingle(round( -(2^24-1)*2^104,SG,RU));
printsingle(round( -(2^24-1/2)*2^104,SG,RD));
printsingle(round( -(2^24-1/2)*2^104,SG,RN));
printsingle(round( -(2^24-1/2)*2^104,SG,RU));
printsingle(round( -(2^23)*2^(-149),SG,RD));
printsingle(round( -(2^23)*2^(-149),SG,RN));
printsingle(round( -(2^23)*2^(-149),SG,RU));
printsingle(round( -(2^23-1)*2^(-149),SG,RD));
printsingle(round( -(2^23-1)*2^(-149),SG,RN));
printsingle(round( -(2^23-1)*2^(-149),SG,RU));
printsingle(round( -(1)*2^(-149),SG,RD));
printsingle(round( -(1)*2^(-149),SG,RN));
printsingle(round( -(1)*2^(-149),SG,RU));
printsingle(round( -(1/2)*2^(-149),SG,RD));
printsingle(round( -(1/2)*2^(-149),SG,RN));
printsingle(round( -(1/2)*2^(-149),SG,RU));

/*********************************************************************************/
/* Non-regression tests for #15239
   Variable a is supposed to be evaluated the same way in both situations, i.e. with a faithful evaluation.
*/
restart;
print("=============== Test number 3 ================");
verbosity = 2;
a=1 + 2^100000 * sin((log(13)/log(17) - log2(13)/log2(17)) * 2^1000);
a;
a*x;

/*********************************************************************************/
/* Non-regression tests for #10317 */
/* The warning displayed could mention that the inclusion property is satisfied and that a rounding has happened, but not that the safety is compromised. */
restart;
print("=============== Test number 4 ================");
verbosity = 2;
roundingwarnings=on;
f=x;
b=f([0.1]);

/*********************************************************************************/
/* Non-regression tests for #16434 */
/* The simplification of expression is allowed only when the expression is well-defined everywhere (at least by continuity) */
restart;
print("=============== Test number 5 ================");
evaluate(sin(5 * pi)/(sin(5 * pi)),17); /* expecting NaN */
evaluate(exp(log(sin(5 * pi)) - log(sin(5 * pi))),17); /* expecting NaN */
evaluate(log(sin(5 * pi)) - log(sin(5 * pi)),17); /* expecting NaN */
print(simplify( ((x/x)-1)/((x/x)-1) )); /* expecting 0/0 or NaN */
print(simplify( ((x/x)-1) )); /* expecting 0 */
print(simplify( x/x )); /* expecting 1 */
print(simplify( log2(x)-log(x)/log(2) )); /* expecting log2(x)-log(x)/log(2) */
print(simplify( (log2(x)-log(x)/log(2))/(log2(x)-log(x)/log(2)) )); /* expecting (log2(x)-log(x)/log(2))/(log2(x)-log(x)/log(2)) */
print(simplify( (cos(x)^2+sin(x)^2)+2 )); /* expecting (cos(x)^2+sin(x)^2)+2 */
print(simplify( ((cos(x)^2+sin(x)^2)+2)/((cos(x)^2+sin(x)^2)+2) )); /* expecting 1 */
print(simplify( (cos(x)+2)/(cos(x)+2) )); /* expecting 1 */
print(simplify( ((x+1)^2/(x^2+2*x+1)-1)/((x+1)^2/(x^2+2*x+1)-1) )); /* expecting ((x+1)^2/(x^2+2*x+1)-1)/((x+1)^2/(x^2+2*x+1)-1) */
print(simplify( (cos(x)+2)-(cos(x)+2) )); /* expecting 0 */
print(simplify( log((cos(x)^2+sin(x)^2)-1)-log((cos(x)^2+sin(x)^2)-1) )); /* expecting log((cos(x)^2+sin(x)^2)-1)-log((cos(x)^2+sin(x)^2)-1) */
print(simplify( cos(x)/cos(x) )); /* expecting cos(x)/cos(x) (1 would be better, but requires some effort to prove it) */
print(simplify( cos(2*x)/cos(2*x) )); /* expecting cos(2*x)/cos(2*x) (1 would be better, but requires some effort to prove it) */
print(simplify( cos(2+x)/cos(2+x) )); /* expecting cos(2+x)/cos(2+x) (1 would be better, but requires some effort to prove it) */
print(simplify( cos(pi/2+x)/cos(pi/2+x) )); /* expecting cos(pi/2+x)/cos(pi/2+x) (1 would be better, but requires some effort to prove it) */
print(simplify( cos(pi/2+cos(x)^2+sin(x)^2-1)/cos(pi/2+cos(x)^2+sin(x)^2-1) )); /* expecting cos(pi/2+cos(x)^2+sin(x)^2-1)/cos(pi/2+cos(x)^2+sin(x)^2-1) */
print(simplify( cos(pi*abs(x)/(2*x))/cos(pi*abs(x)/(2*x)) )); /* expecting cos(pi*abs(x)/(2*x))/cos(pi*abs(x)/(2*x)) */
print(simplify( log(x)-log(x) )); /* expecting log(x)-log(x) */
print(simplify( log(x)/log(x) )); /* expecting log(x)/log(x) */
print(simplify( cos(x)-cos(x) )); /* expecting 0 */
print(simplify( (x+1)^2/(x^2+2*x+1) - 1 )); /* expecting (x+1)^2/(x^2+2*x+1) - 1 */
print(simplify( (x^2+2*x+1)/(x^2+2*x+1) - 1 )); /* expecting 0 */
print(simplify( (-log(x))^(-1) / (-log(x))^(-1) )); /* expecting (-log(x))^(-1) / (-log(x))^(-1) */
print(simplify( 2/x - 2/x )); /* expecting 0 */
print(simplify( @Inf@/x - @Inf@/x )); /* expecting @Inf@/x - @Inf@/x */
u = 1/2 * (abs(x)/x + 1);
print(simplify( u-u )); /* expecting 0 */
d = abs(x)/x;
print(simplify( d/d )); /* expecting 1 */
f= abs(x)/x+1;
print(simplify( f/f )); /* expecting (abs(x)/x+1)/(abs(x)/x+1) */
print(simplify( 0/f )); /* expecting 0/(abs(x)/x+1) */
print(simplify( log(3 + cos(x)) - log(3 + cos(x)) )); /* expecting 0 */
print(simplify( log(3 + cos(x)) / log(3 + cos(x)) )); /* expecting 1 */