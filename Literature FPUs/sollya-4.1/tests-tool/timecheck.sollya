verbosity=0!;
yardstick = time(nop(5000));
i = 0;
variance = [1/10;10];
bigVariance = [1/1000;100];

/* Test #0 */
i;
t = time(p = remez(exp(x),15,[-1b-1;1b-1]))/yardstick;
if (t in 7.55e-2 * variance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Test #1 */
i;
t = time(p = remez(1,[|1,...,15|],[-1b-1;1b-1],1/sin(x)))/yardstick;
if (t in 0.4906005859375 * variance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Test #2 */
i;
 p = ( (x-pi)^25-exp(1) )^3;
t = time(c = coeff(p,65))/yardstick;
if (t in 0.22 * variance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Test #3 */
i;
t = time(eps = dirtyinfnorm(p/sin(x)-1,[-1b-1;1b-1]))/yardstick;
if (t in 9.429931640625e-2 * variance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Test #4 */
i;
t = time(p = horner((x - (x + 3)^2)^17)/yardstick;
if (t in 9.429931640625e-2 * variance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Test #5 */
i;
t = time(h = (diff(horner((x - (x + 3)^2)^17))(0))/yardstick;
if (t in 9.429931640625e-2 * variance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Test #6 */
i;
t = time(w = evaluate(sin(pi * x),5))/yardstick;
if (t in 5.00 * bigVariance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Test #7 */
i;
g=2459622443407096130603922553910791619344453683235b-161 + x *
(-25268883760268508124390396265385208781677459970591b-165 + x *
(-14085297510063801424926808282934010153407741369921b-166 + x *
(4919690150708675242175371118264726566064251658765b-163 + x *
(-30234846084156062527259170670458534894432096140199b-166 + x *
(13106657919167141361231703760753023119313255357211b-166 + x *
(-32261918764422751201282738111872472526619593554251b-170 + x *
(-26867827662947273463442414039578299014449169557867b-170 + x *
(23714805850229248824685665833141775842452231424717b-170 + x *
(-34959043924322834830838904754038179037086560229997b-172 + x *
43304790452874839227215830298539051565855964259641b-175))))))))) - sin(1
/ exp(x));
t = time(w = dirtyinfnorm(g,[0;1]))/yardstick;
if (t in 1.4331817626953125e-2 * variance) then "Okay" else round(t,12,RN);
i := i + 1;

/* Check related to bug #10069 */
/* Test #8 */
i;
t = time(pstar = remez(1, 5, [0,1], 1/exp(x)))/yardstick;
if (t in 1e-2 * variance) then "Okay" else round(t,12,RN);
i := i+1;

/* Test #9 */
i;
t = time(r = dirtyinfnorm(pstar/exp(x)-1,[0,1]))/yardstick;
if (t in 7e-3 * variance) then "Okay" else round(t,12,RN);
i := i+1;

/* Test #10 */
i;
rationalmode = on!;
pbug = 1.1000000111011000100011101101001000010101110000000100100100000010011100010111000000000100010110101011000111000110010001101100100001011111001111100010100110111010111_2 * 2^(-1) + x * (1.0101111100001110100011101100101000001010000101101001010111000111101100100010101000100000110011101101000000110111100111010110011001011001110101000101011000010001111_2 + x * (1.11000011101110111000110010100000111111001111000110100101101111100101111010001101100101111001000101010110001010000111100000010110111011001011111111011101000011011_2 * 2^(-1) + x * (1.1001000010101010111000101111001101101010111110111111001100011110001111110010100001010100010010001101111101111000111110011010010110111000010111111000011100111101101_2 + x * (1.100010010000010110101011010010001000011001001010000000111111010011010000010111101111011101111101100110011111011100110001111011111011100000100111000101001010101101_2 * 2^(1) + x * (1.101101101100011011100011001110011101010110000001001111110111001001100101010000010011110110000101101001010001000010000100110101000001110000001101100000110000101011_2 * 2^(2) + x * (1.000001010000000000011010111110000101011011100111101011100111110101011010010101000101100000010000011010101110110110011000111101011000001000101101001010011101011_2 * 2^(4) + x * (1.01000101010001100110111001100110100111011011101001001111001001111111011110011110101010100110111100010100100010110111001101011111001001110001110101110000110111000101_2 * 2^(5) + x * (1.10100010111101010101101011100010001111100011010110111100110100110101110000101110011100001000010011000101000010001100010101110010101110101001000100000011010111101_2 * 2^(6) + x * (1.000101001010100111010001000000000010001111101101010011000000010011010000101100000000101000101111101011100010110011001011010111101010100011101111100110010111000111_2 * 2^(8) + x * (1.0111010010100010101010011001011001100111110101111110011101100101110100000011001001100011010011101111010111111001101001000001111000111110001110110110000000011001011_2 * 2^(9) + x * (1.111111011110001110111111010111100110101110011011011011011110100111101010011001110000001001110010000111000111011001011010110111000001111010011111110011001001101001_2 * 2^(10) + x * (1.01100001011010001010001011011000100001010110101100110101011111101111110011001011101100010111011101001100000101000100110100010100100101000001101100010011001010001001_2 * 2^(12) + x * (1.11101111010000001001011011001000010100010010010010111100010010000100000101010110100000111110000100110011100100010000000011111011001101010010110001111010001101100111_2 * 2^(13) + x * (1.0101111000111010100000111111011000101011001110101001011000110101110000010111000100101100001000011100110110110111010000001110111010011101111011100001100010000011011_2 * 2^(15) + x * (1.11110011010010010111101001101001101000111101011110011101110110010100110100010011110110011000110011111001100000110001111111110101111001011001011011111011101100001101_2 * 2^(16) + x * (1.01100110010110100101110111011110010000000011001010101110000100001010001000101010000000100111111100110000001111011011101101010010001100000110001001010010111011011001_2 * 2^(18) + x * (1.0000001011000010010101011100110000101000011000110100001000111101111101010100000001000001001111010000111100100000010111111110011001110010110000110100011110001101011_2 * 2^(20) + x * (1.01110111101100001011100111110110000000101101111100111111111101100101111101110111000001011011000100110110000101110011111011010001000001100000101101001111000110111_2 * 2^(21) + x * (1.00010010000001111111101101010010010001100110011111101011010101111100001000101001100100000010010001011000110010000101100100010000011011110110011011010010000111001_2 * 2^(23) + x * (1.100100010111011111010001111100000011010110110111111001010110100110000110101100011100000000101000011010110111000000000100011011000100100110001111010110101011110011_2 * 2^(24) + x * (1.0010011100110111010111100001001001101110010100011100100101001101011101101010011010101011000010001001011001010010001100000010000101001101000011011010001010110101111_2 * 2^(26) + x * (1.101100111010111011110000001001000000010101101001111000010011000100100100101001111100111000000010001011100101110011100001000010011000010011110000011011011001001011_2 * 2^(27) + x * (1.01000010100000110101001000011110010001001111111110001101100011110000110011100101010101110111101100000100000011001110101110010000110110010011101000000000010101010001_2 * 2^(29) + x * (1.110111101101110011000010001111111001011000100100001010001010100011000001110011110110110110001001100110011011100100000011000110110001000011011011001000010101001001_2 * 2^(30) + x * (1.011001000111001100000111110011001101101101010100010101110001110010111011100010110001111111101110100100011110100010011111101101111000000101010010110011011010101101_2 * 2^(32) + x * (1.0000100111111010100110110011001001011010011010010110110000111101111010100010000110010000100100100100011101001011000100111100010001011111111101010110011000010110011_2 * 2^(34) + x * (1.10001101110101101111001001010010000101101010011101001100001100111000011001111011110000001101110111100001100111100000100011000000111000111000111100011101011000001101_2 * 2^(35) + x * (1.0010101000101000110000110110110101110110100101110001101111111101011000100001000100000101100000001000111110001010010010101111101001000101011111001000010000110011001_2 * 2^(37) + x * (1.1011111111000111010111100111010111010011110111111010111110001001001011101100111110000111011100001101000000001001010001001111100001010100110001000100101100110011111_2 * 2^(38) + x * (1.0101000011011001100000001001011010001000011000101000000001011101110101010000000001001101110010100111110100011101111011111010100100111111111001001100011010001000111_2 * 2^(40) + x * (1.111110111010100100111011111011111110111000100011111001100100111000111000000010110101001110110101001111111001100000000011011000000010000110010110110001111010101001_2 * 2^(41) + x * (1.011111110010011010100011110101011000110001001001010001001101010111100101000000000011101001111001111000001001000001000111011101100010000101001001110010011100010101_2 * 2^(43)))))))))))))))))))))))))))))))));
pnobug = 1.011111110010011010100011110101011000110001001001010001001101010111100101000000000011101001111001111000001001000001000111011101100010000101001001110010011100010101_2 * 2^(43) * x^(1_2 * 2^(5)) + 1.111110111010100100111011111011111110111000100011111001100100111000111000000010110101001110110101001111111001100000000011011000000010000110010110110001111010101001_2 * 2^(41) * x^(1.1111_2 * 2^(4)) + 1.0101000011011001100000001001011010001000011000101000000001011101110101010000000001001101110010100111110100011101111011111010100100111111111001001100011010001000111_2 * 2^(40) * x^(1.111_2 * 2^(4)) + 1.1011111111000111010111100111010111010011110111111010111110001001001011101100111110000111011100001101000000001001010001001111100001010100110001000100101100110011111_2 * 2^(38) * x^(1.1101_2 * 2^(4)) + 1.0010101000101000110000110110110101110110100101110001101111111101011000100001000100000101100000001000111110001010010010101111101001000101011111001000010000110011001_2 * 2^(37) * x^(1.11_2 * 2^(4)) + 1.10001101110101101111001001010010000101101010011101001100001100111000011001111011110000001101110111100001100111100000100011000000111000111000111100011101011000001101_2 * 2^(35) * x^(1.1011_2 * 2^(4)) + 1.0000100111111010100110110011001001011010011010010110110000111101111010100010000110010000100100100100011101001011000100111100010001011111111101010110011000010110011_2 * 2^(34) * x^(1.101_2 * 2^(4)) + 1.011001000111001100000111110011001101101101010100010101110001110010111011100010110001111111101110100100011110100010011111101101111000000101010010110011011010101101_2 * 2^(32) * x^(1.1001_2 * 2^(4)) + 1.110111101101110011000010001111111001011000100100001010001010100011000001110011110110110110001001100110011011100100000011000110110001000011011011001000010101001001_2 * 2^(30) * x^(1.1_2 * 2^(4)) + 1.01000010100000110101001000011110010001001111111110001101100011110000110011100101010101110111101100000100000011001110101110010000110110010011101000000000010101010001_2 * 2^(29) * x^(1.0111_2 * 2^(4)) + 1.101100111010111011110000001001000000010101101001111000010011000100100100101001111100111000000010001011100101110011100001000010011000010011110000011011011001001011_2 * 2^(27) * x^(1.011_2 * 2^(4)) + 1.0010011100110111010111100001001001101110010100011100100101001101011101101010011010101011000010001001011001010010001100000010000101001101000011011010001010110101111_2 * 2^(26) * x^(1.0101_2 * 2^(4)) + 1.100100010111011111010001111100000011010110110111111001010110100110000110101100011100000000101000011010110111000000000100011011000100100110001111010110101011110011_2 * 2^(24) * x^(1.01_2 * 2^(4)) + 1.00010010000001111111101101010010010001100110011111101011010101111100001000101001100100000010010001011000110010000101100100010000011011110110011011010010000111001_2 * 2^(23) * x^(1.0011_2 * 2^(4)) + 1.01110111101100001011100111110110000000101101111100111111111101100101111101110111000001011011000100110110000101110011111011010001000001100000101101001111000110111_2 * 2^(21) * x^(1.001_2 * 2^(4)) + 1.0000001011000010010101011100110000101000011000110100001000111101111101010100000001000001001111010000111100100000010111111110011001110010110000110100011110001101011_2 * 2^(20) * x^(1.0001_2 * 2^(4)) + 1.01100110010110100101110111011110010000000011001010101110000100001010001000101010000000100111111100110000001111011011101101010010001100000110001001010010111011011001_2 * 2^(18) * x^(1_2 * 2^(4)) + 1.11110011010010010111101001101001101000111101011110011101110110010100110100010011110110011000110011111001100000110001111111110101111001011001011011111011101100001101_2 * 2^(16) * x^(1.111_2 * 2^(3)) + 1.0101111000111010100000111111011000101011001110101001011000110101110000010111000100101100001000011100110110110111010000001110111010011101111011100001100010000011011_2 * 2^(15) * x^(1.11_2 * 2^(3)) + 1.11101111010000001001011011001000010100010010010010111100010010000100000101010110100000111110000100110011100100010000000011111011001101010010110001111010001101100111_2 * 2^(13) * x^(1.101_2 * 2^(3)) + 1.01100001011010001010001011011000100001010110101100110101011111101111110011001011101100010111011101001100000101000100110100010100100101000001101100010011001010001001_2 * 2^(12) * x^(1.1_2 * 2^(3)) + 1.111111011110001110111111010111100110101110011011011011011110100111101010011001110000001001110010000111000111011001011010110111000001111010011111110011001001101001_2 * 2^(10) * x^(1.011_2 * 2^(3)) + 1.0111010010100010101010011001011001100111110101111110011101100101110100000011001001100011010011101111010111111001101001000001111000111110001110110110000000011001011_2 * 2^(9) * x^(1.01_2 * 2^(3)) + 1.000101001010100111010001000000000010001111101101010011000000010011010000101100000000101000101111101011100010110011001011010111101010100011101111100110010111000111_2 * 2^(8) * x^(1.001_2 * 2^(3)) + 1.10100010111101010101101011100010001111100011010110111100110100110101110000101110011100001000010011000101000010001100010101110010101110101001000100000011010111101_2 * 2^(6) * x^(1_2 * 2^(3)) + 1.01000101010001100110111001100110100111011011101001001111001001111111011110011110101010100110111100010100100010110111001101011111001001110001110101110000110111000101_2 * 2^(5) * x^(1.11_2 * 2^(2)) + 1.000001010000000000011010111110000101011011100111101011100111110101011010010101000101100000010000011010101110110110011000111101011000001000101101001010011101011_2 * 2^(4) * x^(1.1_2 * 2^(2)) + 1.101101101100011011100011001110011101010110000001001111110111001001100101010000010011110110000101101001010001000010000100110101000001110000001101100000110000101011_2 * 2^(2) * x^(1.01_2 * 2^(2)) + 1.100010010000010110101011010010001000011001001010000000111111010011010000010111101111011101111101100110011111011100110001111011111011100000100111000101001010101101_2 * 2^(1) * x^(1_2 * 2^(2)) + 1.1001000010101010111000101111001101101010111110111111001100011110001111110010100001010100010010001101111101111000111110011010010110111000010111111000011100111101101_2 * x^(1.1_2 * 2^(1)) + 1.11000011101110111000110010100000111111001111000110100101101111100101111010001101100101111001000101010110001010000111100000010110111011001011111111011101000011011_2 * 2^(-1) * x^(1_2 * 2^(1)) + 1.0101111100001110100011101100101000001010000101101001010111000111101100100010101000100000110011101101000000110111100111010110011001011001110101000101011000010001111_2 * x + (1.1000000111011000100011101101001000010101110000000100100100000010011100010111000000000100010110101011000111000110010001101100100001011111001111100010100110111010111_2 * 2^(-1));
x0 = 1.0100001_2 * 2^(-45);
t1 = time(q=horner(simplify(pnobug(x-x0))))/yardstick;
t2 = time(r=horner(simplify(pbug(x-x0))))/yardstick;
if (t1 in 5.7e-4 * variance) then "Okay" else print("t1 = ", round(t1,12,RN));
if (t2 in 4.6e-4 * variance) then "Okay" else print("t2 = ", round(t2,12,RN));
rationalmode=default!;
i := i+1;

/* Test #11 */
i;
/* The computation is run once for filling MPFR chache */
test=(log2(10)==1/log10(2));

/* Now we can safely compare the timings of several tests */
t1 = time(test=(log2(10)==1/log10(2)));
t2 = time(test=(log2(10)<=1/log10(2)));
t3 = time(test=(log2(10)<1/log10(2)));
t4 = time(test=(log2(10)>=1/log10(2)));
t5 = time(test=(log2(10)>1/log10(2)));

/* Non-regression of timings */
if 1.25*t1 >= t2 then "Okay" else print("t1 = ", round(t1,12,RN), " and t2 = ", round(t2, 12, RN));
if 1.25*t1 >= t3 then "Okay" else print("t1 = ", round(t1,12,RN), " and t3 = ", round(t3, 12, RN));
if 1.25*t1 >= t4 then "Okay" else print("t1 = ", round(t1,12,RN), " and t4 = ", round(t4, 12, RN));
if 1.25*t1 >= t5 then "Okay" else print("t1 = ", round(t1,12,RN), " and t5 = ", round(t5, 12, RN));

if 1.25*t2 >= t1 then "Okay" else print("t2 = ", round(t2,12,RN), " and t1 = ", round(t1, 12, RN));
if 1.25*t2 >= t3 then "Okay" else print("t2 = ", round(t2,12,RN), " and t3 = ", round(t3, 12, RN));
if 1.25*t2 >= t4 then "Okay" else print("t2 = ", round(t2,12,RN), " and t4 = ", round(t4, 12, RN));
if 1.25*t2 >= t5 then "Okay" else print("t2 = ", round(t2,12,RN), " and t5 = ", round(t5, 12, RN));

if 1.25*t3 >= t1 then "Okay" else print("t3 = ", round(t3,12,RN), " and t1 = ", round(t1, 12, RN));
if 1.25*t3 >= t2 then "Okay" else print("t3 = ", round(t3,12,RN), " and t2 = ", round(t2, 12, RN));
if 1.25*t3 >= t4 then "Okay" else print("t3 = ", round(t3,12,RN), " and t4 = ", round(t4, 12, RN));
if 1.25*t3 >= t5 then "Okay" else print("t3 = ", round(t3,12,RN), " and t5 = ", round(t5, 12, RN));

if 1.25*t4 >= t1 then "Okay" else print("t4 = ", round(t4,12,RN), " and t1 = ", round(t1, 12, RN));
if 1.25*t4 >= t2 then "Okay" else print("t4 = ", round(t4,12,RN), " and t2 = ", round(t2, 12, RN));
if 1.25*t4 >= t3 then "Okay" else print("t4 = ", round(t4,12,RN), " and t3 = ", round(t3, 12, RN));
if 1.25*t4 >= t5 then "Okay" else print("t4 = ", round(t4,12,RN), " and t5 = ", round(t5, 12, RN));

if 1.25*t5 >= t1 then "Okay" else print("t5 = ", round(t5,12,RN), " and t1 = ", round(t1, 12, RN));
if 1.25*t5 >= t2 then "Okay" else print("t5 = ", round(t5,12,RN), " and t2 = ", round(t2, 12, RN));
if 1.25*t5 >= t3 then "Okay" else print("t5 = ", round(t5,12,RN), " and t3 = ", round(t3, 12, RN));
if 1.25*t5 >= t4 then "Okay" else print("t5 = ", round(t5,12,RN), " and t4 = ", round(t4, 12, RN));
i := i+1;

/* Test #12 */
/* Non-regression for bug #15363, solved at revision 1934 */
i;
f = 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) + 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5);
t = time(for iiii from 1 to 100 do a=evaluate(f, [10]))/(yardstick * 100);
if (t in 3e-4 * variance) then "Okay" else round(t,12,RN);
i := i + 1;


/* Test #13 */
/* Other problem, discovered as a side effect of bug report #15363, solved at revision 1935 */
i;
f = 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) + 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5) + 5 / 48 * cos(x^(-0.625) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) + (2 * (pi)) / 3) / 2)^(-3.5) * 5 / 48 * cos((x^(-0.625) - (2 * (pi)) / 3) / 2)^(-3.5);
t1 = time(for k from 0 to 1000 do a=horner(f))/yardstick;
t2 = time(for k from 0 to 1000 do a=horner(f*5))/yardstick;
if 1.25*t1 >= t2 then "Okay" else print("t1 = ", round(t1,12,RN), " and t2 = ", round(t2, 12, RN));
if 1.25*t2 >= t1 then "Okay" else print("t1 = ", round(t1,12,RN), " and t2 = ", round(t2, 12, RN));
i := i + 1;

/* Test #14 */
/* Non-regression tests for memory optimizations introduced into the trunk at revision 1775 */
i;
n = 1000;
t1 = time({L=[||]; for k from 0 to n do L = 1.:L;})/yardstick;
t2 = time(for k from 0 to n do a = head(L))/yardstick;
t3 = time(for k from 0 to n do L = tail(L))/yardstick;
if (t1 in 1.38e-3 * variance) then "Okay" else "t1 = ", round(t1,12,RN);
if (t2 in 9.25e-4 * variance) then "Okay" else "t2 = ", round(t2,12,RN);
if (t3 in 8.5e-4 * variance) then "Okay" else "t3 = ", round(t3,12,RN);
i := i+1;

/* Test #15 */
/* Non-regression tests for optimizations of lists introduced in the branch optimLists */
i;
n = 1000; L = [||]; for k from 0 to n do L = 1.:L;
t1 = time(for k from 0 to n do a = L[n]);
n = 2000; L = [||]; for k from 0 to n do L = 1.:L;
t2 = time(for k from 0 to n do a = L[n]);
if (1.75 <= t2/t1) && (t2/t1 <= 2.25)
  then "Okay"
  else print("t1 = ", round(t1,12,RN), " and t2 = ", round(t2, 12, RN));
i:=i+1;

"End of test";