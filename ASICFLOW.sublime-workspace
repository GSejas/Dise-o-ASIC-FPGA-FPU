{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"if",
				"if\tif_else_statement"
			],
			[
				"case",
				"case\t: 3bit case "
			],
			[
				"Da",
				"Data_i"
			],
			[
				"Un",
				"Underflow_flag"
			],
			[
				"He",
				"Hexadecimal_B"
			],
			[
				"enab_con",
				"enab_cont_iter"
			],
			[
				"OP",
				"init_OPERATION"
			],
			[
				"be",
				"beg_add_subt"
			],
			[
				"beg",
				"beg_add_subt"
			],
			[
				"cont_",
				"enab_cont_var"
			],
			[
				"rea",
				"ready_CORDIC"
			],
			[
				"enab",
				"enab_d_ff5_data_out"
			],
			[
				"ena",
				"enab_cont_iter"
			],
			[
				"en",
				"enab_RB2"
			],
			[
				"rese",
				"reset_reg_cordic"
			],
			[
				"ena_dff",
				"enab_dff_z"
			],
			[
				"ready_",
				"ready_add_subt"
			],
			[
				"cas",
				"case\t: 2bit case "
			],
			[
				"max",
				"max_tick_iter"
			],
			[
				"min",
				"min_tick_iter"
			],
			[
				"est",
				"est7"
			],
			[
				"max_",
				"max_tick_var"
			],
			[
				"final",
				"final_result_ieee"
			],
			[
				"NRM",
				"NRM_STAGE"
			],
			[
				"over",
				"overflow"
			],
			[
				"ARR",
				"Array_IN_3"
			],
			[
				"Ope",
				"Operand1_W"
			],
			[
				"log",
				"logVectorReference"
			],
			[
				"SGF",
				"SFG_ACTIVE"
			],
			[
				"SHT2",
				"SHT2_ACTIVE"
			],
			[
				"SHT",
				"SHT1_ACTIVE"
			],
			[
				"EXP",
				"EXP_ACTIVE"
			],
			[
				"Theoretical_result_",
				"Theoretical_result_exponent"
			],
			[
				"un",
				"underflow_flag_t"
			],
			[
				"L",
				"L_limit"
			],
			[
				"under",
				"underflow_flag"
			],
			[
				"Sign",
				"Sign1"
			],
			[
				"Ex",
				"Exponent1_EW"
			],
			[
				"dia",
				"display"
			],
			[
				"M",
				"Mantissa_M"
			],
			[
				"re",
				"reg"
			],
			[
				"SW",
				"SW-1"
			],
			[
				"zero",
				"zero_flag"
			],
			[
				"ZERO",
				"ZERO_FLAG_SHT2"
			],
			[
				"reg",
				"register\t: w bit d register "
			],
			[
				"Comp",
				"Comparator_Less"
			],
			[
				"SWR",
				"SWR-1"
			],
			[
				"Compara",
				"Comparators"
			],
			[
				"Mul",
				"MultiplexTxT"
			],
			[
				"in",
				"include"
			],
			[
				"W",
				"W-2"
			],
			[
				"DMP_exp",
				"DMP_exp_NRM2"
			],
			[
				"EW",
				"EW-1"
			],
			[
				"EWR",
				"EWR-1"
			],
			[
				"LZ",
				"LZD_output"
			],
			[
				"fi",
				"final_result_ieee_o"
			],
			[
				"mux",
				"mux_sel_norm"
			],
			[
				"LZD",
				"LZD_output"
			],
			[
				"ADD",
				"ADD_OVRFLW_SGF"
			],
			[
				"INPUT",
				"INPUT_ACTIVE"
			],
			[
				"d_ff3",
				"d_ff3_LUT_out"
			],
			[
				"d_ff2",
				"d_ff2_Z"
			],
			[
				"para",
				"parameter"
			],
			[
				"CO",
				"CORDIC_Arch2"
			],
			[
				"al",
				"always\talways"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_submodules_syn.tcl",
			"settings":
			{
				"buffer_size": 3257,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_syn_2.tcl~",
			"settings":
			{
				"buffer_size": 4200,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Barrel_shifter.v",
			"settings":
			{
				"buffer_size": 1563,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Tenth_Phase.v",
			"settings":
			{
				"buffer_size": 2495,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n\nmodule tb_Tenth_Phase (); /* this is automatically generated */\n\n  logic rstb;\n  logic srst;\n  logic clk;\n\n  // clock\n  initial begin\n    clk = 0;\n    forever #5 clk = ~clk;\n  end\n\n  // reset\n  initial begin\n    rstb = 0;\n    srst = 0;\n    #20\n    rstb = 1;\n    repeat (5) @(posedge clk);\n    srst = 1;\n    repeat (1) @(posedge clk);\n    srst = 0;\n  end\n\n  // (*NOTE*) replace reset, clock\n\n  parameter W  = 32;\n  parameter EW = 8;\n  parameter SW = 23;\n\n  logic          rst;\n  logic          load_i;\n  logic          sel_a_i;\n  logic          sel_b_i;\n  logic          sign_i;\n  logic [EW-1:0] exp_ieee_i;\n  logic [SW-1:0] sgf_ieee_i;\n  logic  [W-1:0] final_result_ieee_o;\n\n  Tenth_Phase #(\n      .W(W),\n      .EW(EW),\n      .SW(SW)\n    ) inst_Tenth_Phase (\n      .clk                 (clk),\n      .rst                 (rst),\n      .load_i              (load_i),\n      .sel_a_i             (sel_a_i),\n      .sel_b_i             (sel_b_i),\n      .sign_i              (sign_i),\n      .exp_ieee_i          (exp_ieee_i),\n      .sgf_ieee_i          (sgf_ieee_i),\n      .final_result_ieee_o (final_result_ieee_o)\n    );\n\n  initial begin\n    // do something\n\n    repeat(10)@(posedge clk);\n    $finish;\n  end\n\n  // dump wave\n  initial begin\n    $fsdbDumpfile(\"tb_Tenth_Phase.fsdb\");\n    $fsdbDumpvars(0, \"tb_Tenth_Phase\", \"+mda\");\n  end\n\nendmodule\n",
			"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/TENTH_PHASE/tb_Tenth_Phase.v",
			"file_size": 1362,
			"file_write_time": 131212128998009145,
			"settings":
			{
				"buffer_size": 1362,
				"line_ending": "Unix",
				"name": "tb_Tenth_Phase.sv",
				"scratch": true
			}
		},
		{
			"contents": "\n`timescale 1ns/1ps\n\nmodule tb_Oper_Start_In (); /* this is automatically generated */\n\n  parameter PERIOD = 10;\n  reg clk;\n  reg rst;\n\n  // clock\n  initial begin\n    clk = 0;\n    forever #5 clk = ~clk;\n  end\n\n  // reset\n  initial begin\n    rst = 0;\n\n    #6\n    rst = 1;\n    repeat (6) @(posedge clk);\n    rst = 0;\n  end\n\n  // (*NOTE*) replace reset, clock\n\n  parameter W = 32;\n\n  reg          rst;\n  reg          load_a_i;\n  reg          load_b_i;\n  reg          add_subt_i;\n  reg  [W-1:0] Data_X_i;\n  reg  [W-1:0] Data_Y_i;\n  wire [W-2:0] DMP_o;\n  wire [W-2:0] DmP_o;\n  wire         zero_flag_o;\n  wire         real_op_o;\n  wire         sign_final_result_o;\n`ifdef OPER1\n  Oper_Start_In #(\n      .W(W)\n    ) inst_Oper_Start_In (\n      .clk                 (clk),\n      .rst                 (rst),\n      .load_a_i            (load_a_i),\n      .load_b_i            (load_b_i),\n      .add_subt_i          (add_subt_i),\n      .Data_X_i            (Data_X_i),\n      .Data_Y_i            (Data_Y_i),\n      .DMP_o               (DMP_o),\n      .DmP_o               (DmP_o),\n      .zero_flag_o         (zero_flag_o),\n      .real_op_o           (real_op_o),\n      .sign_final_result_o (sign_final_result_o)\n    );\n`endif\n\n     Oper_Start_In_2_W32_1 inst_Oper_Start_In (\n      .clk                 (clk),\n      .rst                 (rst),\n      .load_b_i            (load_b_i),\n      .intAS               (add_subt_i),\n      .intDX               (Data_X_i),\n      .intDY               (Data_Y_i),\n      .DMP_o               (DMP_o),\n      .DmP_o               (DmP_o),\n      .zero_flag_o         (zero_flag_o),\n      .real_op_o           (real_op_o),\n      .sign_final_result_o (sign_final_result_o)\n    );\n  reg [W-1:0] Array_IN   [0:((2**PERIOD)-1)];\n  reg [W-1:0] Array_IN_2 [0:((2**PERIOD)-1)];\n  integer contador;\n  integer FileSaveData;\n  integer Cont_CLK;\n  integer Recept;\n\nalways begin\n  #(3*PERIOD/2)\n  @(posedge clk) begin\n    load_a_i = 1;\n    load_b_i = 0;\n  end\n  @(posedge clk) begin\n    Data_X_i = Array_IN[contador];\n    Data_Y_i = Array_IN_2[contador];\n    contador = contador + 1;\n    load_a_i = 1;\n    load_b_i = 1;\n  end\n  @(posedge clk) begin\n    load_a_i = 0;\n    load_b_i = 0;\n  end\n  #(3*PERIOD/2);\nend\n\ninitial begin\n  $readmemh(\"Hexadecimal_A.txt\", Array_IN);\n  $readmemh(\"Hexadecimal_B.txt\", Array_IN_2);\nend\n\n\n  initial begin\n    load_a_i = 1;\n    load_b_i = 1;\n    add_subt_i = 0;\n    contador = 0;\n\n    repeat(10240)@(posedge clk);\n    $finish;\n  end\n\n\nendmodule\n",
			"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/INIT_STAGE/tb_Oper_Start_In.v",
			"file_size": 2485,
			"file_write_time": 131215023999159600,
			"settings":
			{
				"buffer_size": 2485,
				"line_ending": "Unix",
				"name": "tb_Oper_Start_In.sv",
				"scratch": true
			}
		},
		{
			"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/INIT_STAGE/file_list",
			"settings":
			{
				"buffer_size": 97,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_32.v",
			"settings":
			{
				"buffer_size": 2855,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/LZD/tb_LZD.v",
			"settings":
			{
				"buffer_size": 1280,
				"line_ending": "Unix"
			}
		},
		{
			"file": "my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_32.v",
			"settings":
			{
				"buffer_size": 2855,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/LZD.v",
			"settings":
			{
				"buffer_size": 2224,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_64.v",
			"settings":
			{
				"buffer_size": 4266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_syn_2.tcl",
			"settings":
			{
				"buffer_size": 4201,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Odd SourceFiles/Greater_Comparator.v",
			"settings":
			{
				"buffer_size": 829,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Add_Subt.v",
			"settings":
			{
				"buffer_size": 2540,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
			"settings":
			{
				"buffer_size": 25624,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/Tenth_Phase_v2.v",
			"settings":
			{
				"buffer_size": 3173,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Pipeline_FPADD_sourcefiles/shift_reg.v",
			"settings":
			{
				"buffer_size": 948,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FORMATTER.v",
			"settings":
			{
				"buffer_size": 2230,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//==================================================================================================\n//  Filename      : tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v\n//  Created On    : 2016-09-27 18:38:13\n//  Last Modified : 2016-09-27 20:01:24\n//  Revision      :\n//  Author        : Jorge Sequeira Rojas\n//  Company       : Instituto Tecnologico de Costa Rica\n//  Email         : jsequeira@gmail.com\n//\n//  Description   :\n//\n//\n//==================================================================================================\n//==================================================================================================\n//  Filename      : tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v\n//  Created On    : 2016-09-25 17:59:05\n//  Last Modified : 2016-09-27 18:36:46\n//  Revision      :\n//  Author        : Jorge Sequeira Rojas\n//  Company       : Instituto Tecnologico de Costa Rica\n//  Email         : jsequeira@gmail.com\n//\n//  Description   :\n//\n//\n//==================================================================================================\n//==================================================================================================\n//  Filename      : tb_uut2_vector_testing.v\n//  Created On    : 2016-09-25 12:25:16\n//  Last Modified : 2016-09-25 12:25:16\n//  Revision      :\n//  Author        : Jorge Sequeira Rojas\n//  Company       : Instituto Tecnologico de Costa Rica\n//  Email         : jsequeira@gmail.com\n//\n//  Description   : Testbench simulating the behavior and stimuli of the FPADD/FPSUB Unit.\n//\n//\n//==================================================================================================\n//==================================================================================================\n//  Filename      : tb_uut2_vector_testing.v\n//  Created On    : 2016-09-24 01:24:56\n//  Last Modified : 2016-09-24 01:24:56\n//  Revision      :\n//  Author        : Jorge Sequeira Rojas\n//  Company       : Instituto Tecnologico de Costa Rica\n//  Email         : jsequeira@gmail.com\n//\n//  Description   : Testbench simulating the behavior and stimuli of the FPADD/FPSUB Unit.\n//\n//\n//==================================================================================================\n\n`timescale 1ns/1ps\n\n\nmodule tb_FPU_PIPELINED_FPADDSUB2_vector_testing (); /* this is automatically generated */\n\n  localparam PERIOD = 10;\n\n  // (*NOTE*) replace reset, clock\n   parameter W   = 32;\n   parameter EW  = 8;\n   parameter SW  = 23;\n   parameter SWR =26;\n   parameter EWR = 5;  //Single Precision */\n\n  // parameter W   = 64;\n  // parameter EW  = 11;\n  // parameter SW  = 52;\n  // parameter SWR = 55;\n  // parameter EWR = 6;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n//                           MODULE SIGNALS\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  reg         clk;\n  reg         rst;\n  reg         beg_OP;\n  reg [W-1:0] Data_X;\n  reg [W-1:0] Data_Y;\n  reg         add_subt;\n  wire        busy;\n  wire        overflow_flag;\n  wire        underflow_flag;\n  wire        zero_flag;\n\n  wire [W-1:0] final_result_ieee;\n  reg [SW-1:0] final_result_ieee_mantissa;\n  reg [EW-1:0] final_result_ieee_exponent;\n  reg          final_result_ieee_sign;\n\n  wire ready;\n\n//Temps for the testbench and verification\n\n  reg [SW-1:0] Data_X_mant;\n  reg [SW-1:0] Data_Y_mant;\n  reg [EW-1:0] Data_X_exp;\n  reg [EW-1:0] Data_Y_exp;\n  reg Data_X_sign;\n  reg Data_Y_sign;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n//                           TASKS VARIABLES\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  reg  [W-1:0] formatted_number_W;\n  reg overflow_flag_t, underflow_flag_t;\n\n  //reg [EWR-1:0] LZD_raw_val_EWR;\n  reg [W-1:0]  Theoretical_result;\n  reg [SW-1:0] Theoretical_result_mantissa;\n  reg [EW-1:0] Theoretical_result_exponent;\n  reg Theoretical_result_sign;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n//                           STIMULI SIGNALS\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  reg [W-1:0] Array_IN [0:((2**PERIOD)-1)];\n  reg [W-1:0] Array_IN_2 [0:((2**PERIOD)-1)];\n  reg [W-1:0] Array_IN_3 [0:((2**PERIOD)-1)];\n  integer contador;\n  integer FileSaveData;\n  integer logVectorReference;\n  integer Cont_CLK;\n  integer Recept;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n//                           END OF DECLARATIONS\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  FPU_PIPELINED_FPADDSUB #(\n      .W(W),\n      .EW(EW),\n      .SW(SW),\n      .SWR(SWR),\n      .EWR(EWR)\n    ) inst_uut (\n      .clk               (clk),\n      .rst               (rst),\n      .beg_OP            (beg_OP),\n      .Data_X            (Data_X),\n      .Data_Y            (Data_Y),\n      .add_subt          (add_subt),\n      .busy              (busy),\n      .overflow_flag     (overflow_flag),\n      .underflow_flag    (underflow_flag),\n      .zero_flag         (zero_flag),\n      .ready             (ready),\n      .final_result_ieee (final_result_ieee)\n    );\n\nalways begin\n    #1;\n    final_result_ieee_mantissa = final_result_ieee[SW-1:0];\n    final_result_ieee_exponent = final_result_ieee[W-2:SW];\n    final_result_ieee_sign     = final_result_ieee[W-1];\n    Data_X_mant = Data_X[SW-1:0];\n    Data_Y_mant = Data_Y[SW-1:0];\n    Data_X_exp  = Data_X[W-2:SW];\n    Data_Y_exp  = Data_Y[W-2:SW];\n    Data_X_sign = Data_X[W-1];\n    Data_Y_sign = Data_Y[W-1];\n    Theoretical_result_mantissa = Theoretical_result[SW-1:0];\n    Theoretical_result_exponent = Theoretical_result[W-2:SW];\n    Theoretical_result_sign = Theoretical_result[W-1];\n\nend\n\n// function [EWR-1:0] LZD_raw; // function definition starts here\n//    input [SWR-1:0] ADD_SUB_RAW;\n//    integer k;\n//    begin\n//      LZD_raw = 0;\n//      k=SWR-1;\n//      while(ADD_SUB_RAW[k] == 0) begin\n//        k = k-1;\n//        LZD_raw = LZD_raw + 1;\n//         $display(\"This is the bit analized %d\\n\", k);\n//         $display(\"This is the bit analized %d\\n\", ADD_SUB_RAW[k]);\n//         $display(\"Number of 0s %d\\n\", LZD_raw);\n//      end\n//    end\n//  endfunction\n\n\n   initial begin\n    FileSaveData = $fopen(\"ResultadoXilinxFLM.txt\",\"w\");\n    logVectorReference = $fopen(\"output_log.py\",\"w\");\n\n    rst = 1;\n\n`ifdef SUB_OPER\n    add_subt = 1; //Se realiza la operacion de resta\n`else\n    add_subt = 0; //Se realiza la operacion de suma\n`endif\n\n    beg_OP = 0;\n    Data_Y = 0;\n    Data_X = 0;\n    Data_X_mant = 0;\n    Data_Y_mant = 0;\n    Data_X_exp  = 0;\n    Data_Y_exp  = 0;\n    Data_X_sign = 0;\n    Data_Y_sign = 0;\n    //Theoretical_result = 32'hbe1abef8;\n    //Inicializa las variables del testbench\n    contador = 0;\n    Cont_CLK = 0;\n\n\n\n    #98 rst = 0;\n    //FPADD_FPSUB(0, Array_IN[3], Array_IN_2[3], formatted_number_W, overflow_flag_t, underflow_flag_t);\n\n\n\n   end\n\n   //**************************** Se lee el archivo txt y se almacena en un arrays***************************************************//\n\n    initial begin\n        $readmemh(\"Hexadecimal_A.txt\", Array_IN);\n        $readmemh(\"Hexadecimal_B.txt\", Array_IN_2);\n        $readmemh(\"Hexadecimal_R.txt\", Array_IN_3);\n    end\n\n     //**************************** Transmision de datos de forma paralela ************************************************************//\n\n  always @(posedge clk) begin\n      if (contador == (2**PERIOD+6)) begin\n          $fclose(FileSaveData);\n          $fclose(logVectorReference);\n          $finish;\n      end else if(ready) begin\n        $fwrite(FileSaveData,\"%h\\n\",final_result_ieee);\n      end\n\n  end\n\nalways @(negedge clk) begin\n    #(PERIOD/5);\n    if(~busy & ~rst) begin\n      beg_OP = 1;\n    end\nend\n\nalways @(posedge clk) begin\n    #(PERIOD/5);\n    if(rst) begin\n        contador = 0;\n    end\n    else if(~busy & ~rst) begin\n        Data_X = Array_IN[contador];\n        Data_Y = Array_IN_2[contador];\n        Theoretical_result = Array_IN_3[contador];\n        contador = contador + 1;\n        @(posedge clk)\n        #(PERIOD/3);\n        Data_X = Array_IN[contador];\n        Data_Y = Array_IN_2[contador];\n        Theoretical_result = Array_IN_3[contador];\n        contador = contador + 1;\n        @(posedge clk)\n        #(PERIOD/3);\n        Data_X = Array_IN[contador];\n        Data_Y = Array_IN_2[contador];\n        Theoretical_result = Array_IN_3[contador];\n        contador = contador + 1;\n        repeat(3) @(posedge clk);\n    end\nend\n\n  // clock\n\n  initial begin\n    clk = 0;\n    forever #(PERIOD/2) clk = ~clk;\n  end\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//\n//                           TASKS\n//\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\ntask FPADD_FPSUB;\n\n  //inputs\n    input op;\n    input [W-1:0] Operand1_W;\n    input [W-1:0] Operand2_W;\n\n  //outputs\n    output [W-1:0] formatted_number_W;\n    output overflow_flag;\n    output underflow_flag;\n\n  //Temporaries\n    reg [SW-1:0] Mantissa1_SW;\n    reg [SW-1:0] Mantissa2_SW;\n    reg [EW-1:0] Exponent1_EW;\n    reg [EW-1:0] Exponent2_EW;\n\n    reg          Sign1;\n    reg [SW-1:0] Mantissa_M_SW;\n    reg [EW-1:0] Exponent_M_EW;\n\n    reg          Sign2;\n    reg [SW-1:0] Mantissa_m_SW;\n    reg [EW-1:0] Exponent_m_EW;\n\n    reg [SWR-1:0] Mantissa_M_SWR;\n    reg [SWR-1:0] Mantissa_m_SWR;\n    reg [SWR-1:0] Mantissa_m_SWR1;\n    reg [SWR-1:0] norm_Mantissa_SWR;\n\n    reg [EW-1:0] Exponent_diff_EW;\n\n    reg [SWR:0] raw_Mantissa_SWR1;\n\n    reg overflow_flag, underflow_flag;\n    reg carry_out_exp_oper;\n    reg gtXY;\n    reg eqXY;\n    reg real_sign;\n    reg real_op;\n    reg add_overflow;\n    reg overunder;\n    reg [SWR-1:0]raw_Mantissa_SWR;\n    reg [EWR-1:0]LZD_raw_val_EWR;\n    reg [EW-1:0] U_limit; //Max Normal value of the standar ieee 754\n    reg [EW-1:0] L_limit; //Min Normal value of the standar ieee 754\n    reg final_sign;\n    reg [EW-1:0] exp_mux_D1;\n    reg [SW-1:0] sgf_mux_D1;\n    reg [EW-EWR-1:0] LZD_ZFiller;\n    integer k;\n\n    begin\n\n\n      // $display (\"%g CPU Write task with address : 0x%h Data : 0x%h\",\n      //   $time, address,data);\n      // $display (\"%g  -> Driving CE, WR, WR data and ADDRESS on to bus\",\n      //   $time);\n      Sign1 =     Operand1_W[W-1];\n      Sign2 =     Operand2_W[W-1];\n      Exponent1_EW = Operand1_W[EW-1+SW:SW];\n      Exponent2_EW = Operand2_W[EW-1+SW:SW];\n      Mantissa1_SW = Operand1_W[SW-1:0];\n      Mantissa2_SW = Operand2_W[SW-1:0];\n\n\n      //LZD_raw_val_EWR = LZD_raw({3'b000,Operand1_W});\n\n      if(EW == 8) begin\n        assign U_limit = 9'hfe;\n        assign L_limit = 9'h01;\n      end\n      else begin\n        assign U_limit = 12'b111111111110;\n        assign L_limit = 12'b000000000001;\n      end\n\n      if(W == 32) begin\n          assign exp_mux_D1 =8'hff;\n          assign sgf_mux_D1 =23'd0;\n      end\n      else begin\n\n          assign exp_mux_D1 =11'hfff;\n          assign sgf_mux_D1 =52'd0;\n\n      end\n\n    if (EW == 8) begin\n        LZD_ZFiller = 3'd0;\n    end else begin\n        LZD_ZFiller =5'd0;\n    end\n\n      //@ (posedge clk);\n      #10;\n\n      $fwrite(logVectorReference,\"=============INIT STAGE: input signals==============\\n\");\n\n      $fwrite(logVectorReference,\"---------First Operator------------\\n\");\n      $fwrite(logVectorReference,\"FP Format = 0x%30h, Mantissa = 0x%21h, Exponent = 0x%6h, sign = %d\\n\", Operand1_W, Mantissa1_SW, Exponent1_EW, Sign1);\n      $fwrite(logVectorReference,\"FP Format = %b, Mantissa = %b, Exponent = %b, sign = %b\\n\", Operand1_W, Mantissa1_SW, Exponent1_EW, Sign1);\n      $fwrite(logVectorReference,\"--------Second Operator------------\\n\");\n      $fwrite(logVectorReference,\"P Format = 0x%30h, Mantissa = 0x%21h, Exponent = 0x%6h, sign = %d\\n\", Operand2_W, Mantissa2_SW, Exponent2_EW, Sign2);\n      $fwrite(logVectorReference,\"FP Format = %b, Mantissa = %b, Exponent = %b, sign = %b\\n\", Operand2_W, Mantissa2_SW, Exponent2_EW, Sign2);\n\n      gtXY = ({Exponent1_EW, Mantissa1_SW} > {Exponent2_EW, Mantissa2_SW}) ? 1'b1 : 1'b0;\n      eqXY = ({Exponent1_EW, Mantissa1_SW} == {Exponent2_EW, Mantissa2_SW}) ? 1'b1 : 1'b0;\n      real_op = op ^ Sign2 ^ Sign1;\n      real_sign = (gtXY | ((op | Sign2) & (~op | ~Sign2))) & ( Sign1 | ~(eqXY | gtXY));\n\n      if(gtXY == 1) begin\n        {Exponent_M_EW, Mantissa_M_SW} = {Exponent1_EW , Mantissa1_SW};\n        {Exponent_m_EW, Mantissa_m_SW} = {Exponent2_EW , Mantissa2_SW};\n      end\n      else begin\n        {Exponent_M_EW, Mantissa_M_SW} = {Exponent2_EW , Mantissa2_SW};\n        {Exponent_m_EW, Mantissa_m_SW} = {Exponent1_EW , Mantissa1_SW};\n      end\n\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=============INIT STAGE: output signals==============\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"Sign = %d, real_op = %d\\n\", real_sign, real_op);\n      $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa_M_SW = 0x%21h, Exponent_M_EW = 0x%6h\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SW = %b, Exponent_M_EW = %b\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------Small Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa_m_SW = 0x%21h, Exponent_m_EW = 0x%6h\\n\", Mantissa_m_SW, Exponent_m_EW);\n      $fwrite(logVectorReference,\"Mantissa_m_SW = %b, Exponent_m_EW = %b\\n\", Mantissa_m_SW, Exponent_m_EW);\n      $fwrite(logVectorReference,\"======================== ^ ===================\\n\");\n\n      //$fwrite(logVectorReference,\"===============INIT STAGE: FROM THE UUT ============\\n\");\n      //$fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      //$fwrite(logVectorReference,\"SIGN_FLAG_EXP = %d, OP_FLAG_INIT = %d\\n\", uut.SIGN_FLAG_INIT, uut.OP_FLAG_INIT);\n      // $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      // $fwrite(logVectorReference,\"Mantissa_M_SW = 0x%21h, Exponent_M_EW = 0x%6h\\n\", Mantissa_M_SW, Exponent_M_EW);\n      // $fwrite(logVectorReference,\"Mantissa_M_SW = %b, Exponent_M_EW = %b\\n\", Mantissa_M_SW, Exponent_M_EW);\n      // $fwrite(logVectorReference,\"--------Small Number------------\\n\");\n      // $fwrite(logVectorReference,\"Mantissa_m_SW = 0x%21h, Exponent_m_EW = 0x%6h\\n\", Mantissa_m_SW, Exponent_m_EW);\n      // $fwrite(logVectorReference,\"Mantissa_m_SW = %b, Exponent_m_EW = %b\\n\", Mantissa_m_SW, Exponent_m_EW);\n      // $fwrite(logVectorReference,\"======================== ^ ===================\\n\");\n      // $fwrite(logVectorReference,\"======================== ^ ===================\\n\");\n      // $fwrite(logVectorReference,\"======================== ^ ===================\\n\");\n      // $fwrite(logVectorReference,\"======================== ^ ===================\\n\");\n      @ (posedge clk);\n\n      Exponent_diff_EW = Exponent_M_EW - Exponent_m_EW;\n\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=============EXP STAGE==============\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"Sign = %d, real_op = %d\\n\", real_sign, real_op);\n      $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa_M_SW = 0x%21h, Exponent_M_EW = 0x%6h\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SW = %b, Exponent_M_EW = %b\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------Small Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa_m_SW = 0x%21h\\n\", Mantissa_m_SW);\n      $fwrite(logVectorReference,\"Mantissa_m_SW = %b\\n\", Mantissa_m_SW);\n      $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      $fwrite(logVectorReference,\"Exponent_diff_EW = Exp M - Exp m = 0x%6h\\n\", Exponent_diff_EW);\n      $fwrite(logVectorReference,\"Exponent_diff_EW = Exp M - Exp m = %b\\n\", Exponent_diff_EW);\n\n\n      // $fwrite(logVectorReference,\"===============EXP STAGE FROM UUT============\\n\");\n      // $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      // $fwrite(logVectorReference,\"SIGN_FLAG_EXP = %d, OP_FLAG_EXP = %d\\n\", uut.SIGN_FLAG_EXP, uut.OP_FLAG_EXP);\n      // $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      // $fwrite(logVectorReference,\"DMP_mant_EXP_SW = 0x%21h, Exponent_M_EW = 0x%6h\\n\", uut.DMP_mant_EXP_SW, uut.DMP_exp_EXP_EW);\n      // $fwrite(logVectorReference,\"DMP_mant_EXP_SW = %b, Exponent_M_EW = %b\\n\", uut.DMP_mant_EXP_SW, uut.DMP_exp_EXP_EW);\n      // $fwrite(logVectorReference,\"--------Small Number------------\\n\");\n      // $fwrite(logVectorReference,\"Mantissa_m_SW = 0x%21h\\n\", uut.DmP_mant_EXP_SW);\n      // $fwrite(logVectorReference,\"Mantissa_m_SW = %b\\n\", uut.DmP_mant_EXP_SW);\n      // $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      // $fwrite(logVectorReference,\"Shift_amount_EXP_EW = Exp M - Exp m = 0x%6h\\n\", uut.Exponent_diff_EW);\n      // $fwrite(logVectorReference,\"Shift_amount_EXP_EW = Exp M - Exp m = %b\\n\", uut.Exponent_diff_EW);\n      // $fwrite(logVectorReference,\"===============EXP STAGE============\\n\");\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=============EXP STAGE==============\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n      @ (posedge clk);\n\n      Mantissa_m_SWR = {1'b1,Mantissa_m_SW, 2'b0} >> Exponent_diff_EW;\n\n\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"==========        ===SHT1 STAGE==============\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"--------Sign = %d, real_op = %d ----------------\\n\", real_sign, real_op);\n      $fwrite(logVectorReference,\"--------Big Number------------------------------------\\n\");\n      $fwrite(logVectorReference,\"--------------Mantissa_M_SW = 0x%21h, Exponent_M_EW = 0x%6h--------\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------------Mantissa_M_SW = %b, Exponent_M_EW = %b--------\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------------Small Number--------------------\\n\");\n      $fwrite(logVectorReference,\"--------Mantissa_m_SW hex = 0x%21h--------\\n\", Mantissa_m_SW);\n      $fwrite(logVectorReference,\"--------Mantissa_m_SW bin = %b----------\\n\", Mantissa_m_SW);\n      $fwrite(logVectorReference,\"--------------------OPERATION RESULT--------------------\\n\");\n      $fwrite(logVectorReference,\"--------Shifted mantissa result hex = 0x%24h-------\\n\", Mantissa_m_SWR);\n      $fwrite(logVectorReference,\"--------Shifted mantissa result bin = %b-------\\n\", Mantissa_m_SWR);\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"==========          ===SHT1 STAGE==============\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n\n\n      @ (posedge clk);\n\n      //Our shifter is segmented, hence, the extra clk cycle\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"===================SHT2 STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"Sign = %d, real_op = %d\\n\", real_sign, real_op);\n      $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa_M_SW = 0x%21h, Exponent_M_EW = 0x%6h\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SW = %b, Exponent_M_EW = %b\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      $fwrite(logVectorReference,\"Shifted Mantissa_m_SWR = 0x%24h\\n\", Mantissa_m_SWR);\n      $fwrite(logVectorReference,\"Shifted Mantissa_m_SWR = %b\\n\", Mantissa_m_SWR);\n      $fwrite(logVectorReference,\"===================SHT2 STAGE================\\n\");\n\n      // $fwrite(logVectorReference,\"======================== ^ ===================\\n\");\n      // $fwrite(logVectorReference,\"===================SHT2 STAGE FROM THE UUT================\\n\");\n      // $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      // $fwrite(logVectorReference,\"Sign = %d, real_op = %d\\n\", uut.SIGN_FLAG_SHT2, uut.OP_FLAG_SHT2);\n\n      // $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      // $fwrite(logVectorReference,\"sftr_idat_SHT2_SWR = 0x%24h\\n\", uut.sftr_idat_SHT2_SWR);\n      // $fwrite(logVectorReference,\"sftr_odat_SHT2_SWR = %b\\n\", uut.sftr_odat_SHT2_SWR);\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"===================SHT2 STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n      @ (posedge clk);\n\n      Mantissa_M_SWR = {1'b1,Mantissa_M_SW, 2'b0};\n\n      if (real_op == 1) begin\n        raw_Mantissa_SWR1 = Mantissa_M_SWR - Mantissa_m_SWR;\n        $display(\"Se restan las mantisas\\n\");\n      end\n      else begin\n        raw_Mantissa_SWR1 = Mantissa_M_SWR + Mantissa_m_SWR;\n        $display(\"Se suman las mantisas\\n\");\n      end\n      raw_Mantissa_SWR = raw_Mantissa_SWR1[SWR-1:0];\n      add_overflow = raw_Mantissa_SWR1[SWR-2];\n\n      add_overflow = add_overflow&(~real_op);\n\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"===================SGF STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"add_overflw = %d, Sign = %d\\n\", add_overflow, real_sign);\n      $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa_M_SW = 0x%24h, Exponent_M_EW = 0x%6h\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SW = %b, Exponent_M_EW = %b\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SW = %26d, Exponent_M_EW = %8d\\n\", Mantissa_M_SW, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SWR = 0x%24h, Exponent_M_EW = 0x%6h\\n\", Mantissa_M_SWR, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SWR = %b, Exponent_M_EW = %b\\n\", Mantissa_M_SWR, Exponent_M_EW);\n      $fwrite(logVectorReference,\"Mantissa_M_SWR = %26d, Exponent_M_EW = %8d\\n\", Mantissa_M_SWR, Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------Small Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa hex = 0x%24h\\n\",Mantissa_m_SWR);\n      $fwrite(logVectorReference,\"Mantissa bin = %b\\n\",Mantissa_m_SWR);\n      $fwrite(logVectorReference,\"Mantissa bin = %26d\\n\",Mantissa_m_SWR);\n      $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa operation result = 0x%24h\\n\", raw_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Mantissa operation result = %b\\n\", raw_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Mantissa operation result = %26d\\n\", raw_Mantissa_SWR);\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"===================SGF STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n      @ (posedge clk);\n\n      LZD_raw_val_EWR = 0;\n      k=SWR-1;\n      $display(\"Mantissa operation result = 0x%h, Mantissa result bin = %b\\n\", raw_Mantissa_SWR, raw_Mantissa_SWR);\n      $display(\"dentro del loop %d, \\n\", raw_Mantissa_SWR[k]);\n      while(~raw_Mantissa_SWR[k]) begin\n        k = k-1;\n        LZD_raw_val_EWR = LZD_raw_val_EWR + 1;\n        $display(\"dentro del loop\\n\");\n      end\n\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== NRM STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"add_overflw = %d, Sign = %d\\n\", add_overflow, real_sign);\n      $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      $fwrite(logVectorReference,\"Mantisa hex SW  = 0x%21h \\n\", Mantissa_M_SW);\n      $fwrite(logVectorReference,\"Mantisa hex SW  = %b\\n\", Mantissa_M_SW);\n      $fwrite(logVectorReference,\"Mantisa hex SWR = 0x%24h\\n\", Mantissa_M_SWR);\n      $fwrite(logVectorReference,\"Mantisa hex SWR = %b\\n\", Mantissa_M_SWR);\n      $fwrite(logVectorReference,\"Exponent = 0x%h\\n\", Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      $fwrite(logVectorReference,\"Mantissa operation result = 0x%24h\\n\", raw_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Mantissa operation result = 0x%h\\n\", raw_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Mantissa operation result = %26d\\n\", raw_Mantissa_SWR);\n      $fwrite(logVectorReference,\"LZD result hex = 0x%h, LZD result hex = %b\\n\", LZD_raw_val_EWR, LZD_raw_val_EWR);\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== NRM STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n\n      @ (posedge clk);\n\n      if (add_overflow) begin\n      //Signed shift\n        norm_Mantissa_SWR = raw_Mantissa_SWR >>> 1;\n      end\n      else begin\n        norm_Mantissa_SWR = raw_Mantissa_SWR << LZD_raw_val_EWR;\n      end\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== NRM2 STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"add_overflw = %d, sign = %d\\n\", add_overflow, real_sign);\n      $fwrite(logVectorReference,\"--------Big Number------------\\n\");\n      $fwrite(logVectorReference,\"Exponent = 0x%6h\\n\", Exponent_M_EW);\n      $fwrite(logVectorReference,\"Exponent = %b\\n\", Exponent_M_EW);\n      $fwrite(logVectorReference,\"Exponent = %8d\\n\", Exponent_M_EW);\n      $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      $fwrite(logVectorReference,\"Normalized mantissa (shifted) = 0x%24h\\n\", norm_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Normalized mantissa (shifted) = %b\\n\", norm_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Normalized mantissa (shifted) = %26d\\n\", norm_Mantissa_SWR);\n      $fwrite(logVectorReference,\"LZD result hex = 0x%h, LZD result bin = %b\\n\", LZD_raw_val_EWR, LZD_raw_val_EWR);\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== NRM2 STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n\n      @ (posedge clk);\n\n      //We do a second shift over here\n\n      //We do the xponent compensation\n\n      if (add_overflow) begin\n        {carry_out_exp_oper,Exponent_M_EW} = Exponent_M_EW - 1;\n      end\n      else begin\n        {carry_out_exp_oper,Exponent_M_EW} = Exponent_M_EW + {LZD_ZFiller,LZD_raw_val_EWR};\n      end\n\n        overflow_flag  =({carry_out_exp_oper,Exponent_M_EW} > U_limit) ? 1'b1 : 1'b0;\n        underflow_flag =({carry_out_exp_oper,Exponent_M_EW} < L_limit) ? 1'b1 : 1'b0;\n\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== NRM2 STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"overflow flag = %d, underflow flag = %d, sign flag = %d\\n\", overflow_flag, underflow_flag, real_sign);\n      $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      $fwrite(logVectorReference,\"Compensated Exponent = 0x%6h, Normalized mantissa (shifted) = 0x%24h\\n\", Exponent_M_EW, norm_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Compensated Exponent = %b,  Normalized mantissa (shifted) = %b\\n\", Exponent_M_EW, norm_Mantissa_SWR);\n      $fwrite(logVectorReference,\"Compensated Exponent = %8d, Normalized mantissa (shifted) = %26d\\n\", Exponent_M_EW, norm_Mantissa_SWR);\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== NRM2 STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n\n      @ (posedge clk);\n\n\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== FRMT STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"La mantisa final sera: 0x%21h\\n\", norm_Mantissa_SWR[SWR-2:2]);\n      $fwrite(logVectorReference,\"La mantisa final sera: %b\\n\", norm_Mantissa_SWR[SWR-2:2]);\n      $fwrite(logVectorReference,\"La mantisa final sera: %23d\\n\", norm_Mantissa_SWR[SWR-2:2]);\n      $fwrite(logVectorReference,\"El exponente final sera: 0x%6h\\n\", Exponent_M_EW);\n      $fwrite(logVectorReference,\"El exponente final sera: %b\\n\", Exponent_M_EW);\n      $fwrite(logVectorReference,\"El exponente final sera: %8d\\n\", Exponent_M_EW);\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"=================== FRMT STAGE================\\n\");\n      $fwrite(logVectorReference,\"===                                             \\n\");\n      $fwrite(logVectorReference,\"======================== * ===================\\n\");\n        overunder = overflow_flag | underflow_flag;\n        case ({overflow_flag,underflow_flag})\n            2'b00: final_sign=real_sign;\n            2'b01: final_sign=1'b1;\n            2'b10: final_sign=1'b0;\n            default: final_sign=0;\n        endcase\n\n        if (overunder == 0) begin\n            formatted_number_W = {final_sign, Exponent_M_EW, norm_Mantissa_SWR[SWR-2:2]};\n        end else begin\n            formatted_number_W = {final_sign,exp_mux_D1,sgf_mux_D1};\n        end\n\n      $fwrite(logVectorReference,\"=================== FRMT STAGE ================\\n\");\n      $fwrite(logVectorReference,\"--------------------FLAGS------------------\\n\");\n      $fwrite(logVectorReference,\"overflow flag = %d, underflow flag = %d\\n\", overflow_flag, underflow_flag);\n      $fwrite(logVectorReference,\"--------OPERATION RESULT------------\\n\");\n      $fwrite(logVectorReference,\"El resultado final sera: %32h\\n\", formatted_number_W);\n      $fwrite(logVectorReference,\"El resultado final sera: %b\\n\", formatted_number_W);\n      $fwrite(logVectorReference,\"El resultado final sera: %32d\\n\", formatted_number_W);\n      $fwrite(logVectorReference,\"=================== FRMT STAGE ================\\n\");\n\n    end\nendtask\n\nendmodule\n\n\n\n\n",
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/bloody_simruns/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
			"file_size": 35125,
			"file_write_time": 131195016840000000,
			"settings":
			{
				"buffer_size": 35130,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/new/CORDIC_Arch3.v",
			"settings":
			{
				"buffer_size": 20406,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/addsub/FPU_ADD_Substract_PIPELINED.v",
			"settings":
			{
				"buffer_size": 24832,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/addsub/FSM_input_enable.v",
			"settings":
			{
				"buffer_size": 3812,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/home/jorge/Documents/Proyecto",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/home/jorge/de",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/home/jorge/Graduación/4Marco",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/home/jorge/Teórico/FPUs/NTNU",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/home/jorge/FPU/low-cost-fpu-src/fpu_top.v",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/home/jorge/FPU/low-cost-fpu-src/testbenches/fpu_top_exception_tb.v",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FSM_input_enable.v",
			"settings":
			{
				"buffer_size": 3526,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 273.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Material",
				"Material Theme: Configuration"
			],
			[
				"theme",
				"Material Theme: Activate theme"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: forg"
			],
			[
				"package",
				"Package Control: Enable Package"
			]
		],
		"width": 447.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"pwd",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpmult_arch3",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2"
	],
	"file_history":
	[
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/tb_CORDIC_Arch3_single/imports/cordic_jorge/tb_CORDIC_Arch3.v",
		"/home/jorge/.config/sublime-text-3/Packages/Verilog Automatic/Default (Linux).sublime-keymap",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/Tenth_Phase_v2.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sim_single_fpsub/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/Testbench/Arch2_vector_single_source/testbench_CORDICArch2.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/Base File.sublime-settings",
		"/home/jorge/.config/sublime-text-3/Packages/Alignment/Default (Linux).sublime-keymap",
		"/home/jorge/.config/sublime-text-3/Packages/User/Verilog.sublime-settings",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/LZD/tb_LZD.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/BARREL_SHIFTER/Testbench_Barrel_Shifter.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/LZD.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Oper_Start_In.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/DW_rbsh_inst.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/exp_operation.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/Shifter_DW_combinational.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/DW_shifter_int.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/simulacion_logica_behavioral/DOUBLE/sim_file_list.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Proyecto_De_Graduacion/FPU_FLM/RTL/Add-Subt/FPU_Add_Subtract_Function.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/simulacion_logica_behavioral/SINGLE/sim_file_list.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch3/FPU_ADD_Substract_PIPELINED.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_syn.tcl",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/ADD_SUB_FUNCIONAL_v1/ADD_SUB_FUNCIONAL_v1.srcs/sim_1/new/Testbench_FPU_Add_Subt.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/simulacion_logica_behavioral/SINGLE/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/simulacion_logica_behavioral/DOUBLE/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sim_double_fpaddsub/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch3/Tenth_Phase_v2.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/shift_mux.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/FPU_Add_Subtract_Function.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch3/FORMATTER.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Rotate_Mux_Array.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Tenth_Phase.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Comparators.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/FPU_all",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/front_end/scripts/file_list",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/front_end/scripts/file_list.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch3_syn.tcl",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch3/integracion_fisica/front_end/source/fpaddsub_arch2_sym",
		"/home/jorge/Documents/laboratorios_synopsys_ibm_GTKWave/useful_commands",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion/my_sourcefiles/Source_Files/FPU_Interface/script_copy_sources.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/script_sources_softlink.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/file_list_create.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_behavioral/SINGLE/log_name",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_behavioral/SINGLE/Testbench_FPU_Add_Subt.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/script_tb_changes.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_behavioral/SINGLE/sim_file_list.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_behavioral/SINGLE/sim_run.sh",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_behavioral/DOUBLE/Testbench_FPU_Add_Subt.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/sources/Source_Files/FPU_Interface/cordic_Arch3/CORDIC_Arch3.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/HDLProject.sublime-settings",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/xor_tri.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Tenth_Phase.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/sgn_result.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Round_Sgf_Dec.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/RegisterAdd.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_64.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_32.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Oper_Start_In.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Mux_3x1.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/MultiplexTxT.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Multiplexer_AC.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/LZD.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Greater_Comparator.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/FSM_Add_Subtract.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Comparators.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Comparator_Less.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Comparator.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/FPU_Add_Subtract_Function.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/exp_operation.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/shift_mux.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Rotate_Mux_Array.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Mux_Array.v",
		"/home/jorge/Documents/1Proyectos_TesisdeGraduacion_ASIC/ASIC_FLOW/ASIC_cordic_Arch2/integracion_fisica/front_end/scripts/ASIC_cordic_Arch2_syn.tcl",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/counter_d.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/my_sourcefiles/cordic_jorge/PriorityEncoder_ExtCORDIC.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/addsub/FSM_input_enable.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/sign_inverter.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/Op_Select.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/CORDIC_COS_32bits_round00/imports/CORDICO/CORDICO.srcs/sim_1/new/testbench_CORDICArch2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/addsub/FPU_ADD_Substract_PIPELINED.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/tb_CORDIC_Arch3_double/imports/cordic_jorge/tb_CORDIC_Arch3.v",
		"/home/jorge/Documents/laboratorios_synopsys_ibm_GTKWave/script_sim_post_GTKWave",
		"/home/jorge/Documents/Karatsuba_FPU/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_syn.tcl",
		"/home/jorge/Documents/Karatsuba_FPU/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/source/fpaddsub_arch2_sym/FPU_Add_Subtract_Function.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/Source_Files/FPU_Interface/script_copy_sources.sh",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/new/CORDIC_Arch3.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/my_sourcefiles/cordic_jorge/CORDIC_FSM_v3.v",
		"/home/jorge/Documents/Hello_Microblaze/Hello_Microblaze.srcs/sources_1/imports/hdl/system_wrapper.v",
		"/home/jorge/Documents/Karatsuba_FPU/ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/file_list.sh",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/Source_Files/FPU_Interface/dir_list",
		"/home/jorge/Documents/Karatsuba_FPU/ASIC_FLOW/script_copy_sources.sh",
		"/home/jorge/Documents/laboratorios_synopsys_ibm_GTKWave/incremental_test.sh",
		"/home/jorge/Documents/laboratorios_synopsys_ibm_GTKWave/script",
		"/home/jorge/Documents/Karatsuba_FPU/ASIC_FLOW/script_create.sh",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jeffrey/CORDIC_FSM_v2.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jorge/Up_Counter.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jorge/DECO_CORDIC_OP.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jorge/PriorityEncoder_ExtCORDIC.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jorge/tb_CORDIC_Arch3.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/RKOA/Time_Constrains_RKOA_sfg.xdc",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jeffrey/CORDIC_Arch2.v",
		"/home/jorge/Documents/Karatsuba_FPU/FPGA_FLOW/Karat/MUL_FPU_FUNCIONAL_v2.srcs/constrs_1/imports/RTL/Nexys4_Master.xdc",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/fpmult_jorge/Time_Constrains_fpmult_JORGE.xdc",
		"/home/jorge/Documents/Karatsuba_FPU/FPGA_FLOW/Karat/MUL_FPU_FUNCIONAL_v2.srcs/sources_1/imports/rtl/FPU_Multiplication_Function_v2.v",
		"/home/jorge/Jeffrey/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/rtl/FPU_Multiplication_Function_v2.v",
		"/home/jorge/Francis",
		"/home/jorge/Funcionales",
		"/home/jorge/Documents/Karatsuba_FPU/FPGA_FLOW/Proyectos",
		"/home/jorge/Jeffrey/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/constrs_1/imports/RTL/Nexys4_Master.xdc",
		"/home/jorge/Jeffrey/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sources_1/imports/rtl/RecursiveKOA.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/sine_cosine_CORDIC/CORDIC_Arch2.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jorge/CORDIC_FSM_v3.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jorge/Mux_3x1_b_v2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/Mux_3x1_b.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/Mux_3x1_b_v2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/cordic_jorge/Mux_3x1_b_v2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/d_ff_en.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/FPADD_vector_test_SINGLE/imports/addsub/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sim_1/imports/sine_cosine_CORDIC/CORDIC_Arch2.v",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/addsub/FPU_ADD_Substract_PIPELINED.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/if_else_statement.sublime-snippet",
		"/home/jorge/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jorge/CORDIC_Arch3.v",
		"/home/jorge/.config/sublime-text-3/Packages/User/counter_synch_CE.sublime-snippet",
		"/home/jorge/eclipse/Documents/Karatsuba_FPU/my_sourcefiles/cordic_jeffrey/CORDIC_FSM_v2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/LUT_ROM_32bits.v",
		"/opt/sublime_text/sublime_text",
		"/home/jorge/Documents/Karatsuba_FPU/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/Floating-Point-Unit-master/Coprocesador_CORDIC_RTL/sine_cosine_CORDIC/CORDIC_Arch2.v",
		"/home/jorge/Documents/Karatsuba_FPU/Karat/MUL_FPU_FUNCIONAL_v1/MUL_FPU_FUNCIONAL_v1.srcs/sim_1/new/Testbench_FPU_multiplication.v",
		"/home/jorge/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 136.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"b_shifter_one_SWR",
			"mux_sel_norm_EWR",
			"b_shifter_one_EWR",
			"b_shifter_one_SWR",
			"SHT2_ACTIVE",
			"rst_int",
			"intDY",
			",",
			"1'b0",
			"*",
			"{1'bx}}",
			"(SWR",
			",  ",
			"* 1'bx}",
			"*1'bx",
			"bX",
			"repeat",
			"X}",
			"},",
			"{1",
			"sign_result",
			"generate",
			"zero_flag",
			"generate",
			"formatted_string",
			"analyze",
			"fpaddsub_arch2",
			"error",
			"warning",
			"genera",
			"fpaddsub_arch2_",
			"counter",
			"b00000001",
			"enab_d_ff_RB1",
			"data_in",
			"reset_reg_cordic",
			"reg_region_flag",
			"reset_reg_cordic",
			"enable_Pipeline_input",
			"FSM_enable_input_internal",
			"enable_shift_reg",
			"enable_Pipeline_input",
			"d_ff1_operation_out",
			"sel_mux_3",
			"sel_mux",
			"sel_mux3",
			"enab_d_ff5_data_out",
			"beg_add_subt",
			"beg_add_sub",
			"real_input_enable",
			"result_add_subt",
			"busy",
			"zero_flag",
			"overflow_flag",
			"busy",
			"cont_var",
			"sel_mux_2",
			"first_mux_X",
			"d_ff2_X",
			"reg_val",
			"reg_val_mux",
			"ready_CORDIC",
			"ready_cordic",
			"enab_d_ff4_Zn",
			"max_tick_iter",
			"beg_add_subt",
			"enab_d_ff4_Zn",
			"max_tick_var",
			"min_tick_iter",
			"enab_d_ff5_data_out",
			"enab_RB3",
			"enab_d_ff2_RB2",
			"cont_var_out",
			"d_iter",
			"mode",
			"ready_CORDIC",
			"cont_var",
			"enab_d_ff2_RB2",
			"d_ff2_X",
			"add_subt_dataA",
			"overflow_flag",
			"cont_var_out",
			"op_add_subt",
			"d_ff3_sign_out",
			"sign_inv_out",
			"data",
			"enab_reg_sel_mux2",
			"enab_reg_sel_mux1",
			"shift_region_flag",
			"shift_region",
			"sel_mux_3",
			"d_ff1_shift_region_flag_out",
			"d_ff1_operation_out",
			"operation",
			"d_ff1_operation_out",
			"sel_mux_3",
			"d_iter",
			"r_mode",
			"rmode",
			"8'",
			"<output>",
			"sel_mux_1",
			"max_tick_var",
			"(),\n",
			"<reg_name>",
			"<reset>",
			"rst",
			"PACKAGE_PIN E3",
			"load_cont_var",
			"d_var",
			"enable_Pipeline_input",
			"FSM",
			"SIGN_FLAG_SHT1SHT2",
			"SIGN",
			"Exp_oper_1_EWR",
			"SIGN",
			"raw_Mantissa_SWR1",
			"Array_IN_3",
			"Array_IN_2",
			"fclose",
			"uut",
			"logVectorReference",
			"FPU_PIPELINED_FPADDSUB",
			"SIGN_FLAG_INIT",
			"sign_",
			"sign",
			"%8h",
			"%23h"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"b_shifter_one_EWR",
			"",
			"1'b0}",
			"{",
			"{1'bx}}}",
			"{(SWR",
			",",
			"{1'bx}",
			"bx",
			"x",
			",",
			"*1",
			"$DESIGN_NAME",
			"fpaddsub_arch2_$PRECISION($x)_",
			"fpaddsub_arch2_$PRECISION($x)",
			"fpaddsub_arch2",
			"fmtted_Result",
			"data_i",
			"data",
			"4'",
			"8'",
			"Data_o",
			"<output>",
			"c_output_W",
			"rst",
			"Exp_oper_1_EW",
			"uut",
			"0x%6h",
			"%0x6h",
			"0x%21h",
			"0x%24h",
			"0x%h",
			"\\n\",",
			"\\n\")",
			"\\n\"",
			"\"",
			"\n      $display(\"===============INIT STAGE: input signals============\");\n      $display(\"---------First Operator------------\");\n      $display(\"Mantissa = %23h, Exponent = %8h, sign = %d\", Mantissa1_SW, Exponent1_EW, Sign1);\n      $display(\"Mantissa = %b, Exponent = %b, sign = %b\", Mantissa1_SW, Exponent1_EW, Sign1);\n      $display(\"--------Second Operator------------\");\n      $display(\"Mantissa = %23h, Exponent = %8h, sign = %d\", Mantissa2_SW, Exponent2_EW, Sign2);\n      $display(\"Mantissa = %b, Exponent = %b, sign = %b\", Mantissa2_SW, Exponent2_EW, Sign2);\n",
			"\");",
			"\\n\");",
			"\");",
			"$fwrite(logVectorReference,\"",
			"fwrite",
			"Shift_reg_FLAGS_7",
			"Shift_reg_FLAGS_6",
			"Shift_reg_FLAGS",
			"ADD_OVRFLW_NRM2",
			"ADD_OVRFLW_FRMT",
			"enable_input_internal",
			"//ack_FSM",
			"beg_OP",
			"DMP_INIT_EWSW",
			"intDY_EWSW",
			"intDY_W1",
			"intDX_EWSW",
			"intDX_W1",
			"intDY_W1",
			"intDY_W",
			"intDX_W1",
			"intDX_W",
			"formatted_number_W",
			"formatted_number",
			"LZD_raw_out_EWR",
			"LZD_raw_output",
			"LZD_raw_out_NRM2_EWR",
			"LZD_raw_output_NRM2",
			"LZD_output_NRM2_EW",
			"LZD_output_NRM2",
			"Raw_mant_NRM_SWR",
			"Raw_mant_NRM",
			"wire [SWR-1:0] Raw_mant_NRM;\n",
			"Add_Subt_LZD_SWR",
			"Add_Subt_LZD",
			"DMP_exp_NRM_EW",
			"DMP_exp_NRM",
			"DMP_mant_SFG_SWR",
			"DmP_mant_SFG_SWR",
			"DmP_mant_SFG",
			"DMP_exp_NRM2_EW",
			"DMP_exp_NRM2",
			"ADDSUB_exp_operand_EW",
			"ADDSUB_exp_operand",
			"exp_rslt_NRM2_EW1",
			"exp_rslt_NRM2",
			"Exp_oper_1_EWR",
			"Exp_oper_1",
			"sftr_odat_SHT2_SWR",
			"sftr_odat_SHT2",
			"sftr_idat_SHT2_SWR",
			"sftr_idat_SHT2",
			"shift_value_SHT2_EWR",
			"shift_value_SHT2",
			"DMP_SHT2_EWSW",
			"DMP_SHT2",
			"Data_array_SWR",
			"Data_array",
			"mux_sel_norm_EWR",
			"mux_sel_norm",
			"sftr_odat_SHT1_SWR",
			"sftr_odat_SHT1",
			"sftr_idat_SHT1_SWR",
			"sftr_idat_SHT1",
			"shft_value_mux_o_EWR",
			"shft_value_mux_o",
			"Shift_amount_SHT1_EWR",
			"Shift_amount_SHT1",
			"DmP_mant_SHT1_SW",
			"DmP_mant_SHT1",
			"DMP_SHT1_EWSW",
			"DMP_SHT1",
			"b_shifter_one_SWR",
			"b_shifter_one",
			"Shift_amount_EXP_EW",
			"Shift_amount_EXP",
			"DmP_mant_EXP_SW",
			"DMP_mant_EXP_SW",
			"DMP_mant_EXP",
			"DmP_exp_EXP_EW",
			"DMP_exp_EXP_EW",
			"DMP_exp_EXP",
			"DmP_EXP_EWSW",
			"DmP_EXP",
			"wire [W-2:0] DMP_EXP_EWSW, DmP_EXP;\n",
			"DMP_EXP_EWSW",
			"DMP_EXP",
			"DmP_INIT_EWSW",
			"DMP_EXP_EWSW",
			"DmP_INIT_W_2",
			"DMP_INIT_W_2"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 27,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_submodules_syn.tcl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3257,
						"regions":
						{
						},
						"selection":
						[
							[
								1999,
								1999
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_syn_2.tcl~",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4200,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 528.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Barrel_shifter.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1563,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Tenth_Phase.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2495,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 144.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/TENTH_PHASE/tb_Tenth_Phase.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1362,
						"regions":
						{
						},
						"selection":
						[
							[
								1362,
								1362
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/INIT_STAGE/tb_Oper_Start_In.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2485,
						"regions":
						{
						},
						"selection":
						[
							[
								459,
								459
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 912.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/INIT_STAGE/file_list",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 97,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_32.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2855,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1104.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/simulacion_logica_sintesis/SINGLE/LZD/tb_LZD.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1280,
						"regions":
						{
						},
						"selection":
						[
							[
								1106,
								1106
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 576.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_32.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2855,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1216.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/LZD.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2224,
						"regions":
						{
						},
						"selection":
						[
							[
								901,
								901
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Priority_Codec_64.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4266,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 81.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "ASIC_FLOW/ASIC_fpaddsub_arch2/integracion_fisica/front_end/scripts/ASIC_fpaddsub_arch2_syn_2.tcl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4201,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/TCL/Tcl.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 297.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Odd SourceFiles/Greater_Comparator.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 829,
						"regions":
						{
						},
						"selection":
						[
							[
								735,
								735
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "ASIC_FLOW/sources/Source_Files/FPU_Interface/fpaddsub_arch2/Add_Subt.v",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2540,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1104.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25624,
						"regions":
						{
						},
						"selection":
						[
							[
								14207,
								14207
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 7597.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/Tenth_Phase_v2.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3173,
						"regions":
						{
						},
						"selection":
						[
							[
								969,
								969
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 328.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Pipeline_FPADD_sourcefiles/shift_reg.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 948,
						"regions":
						{
						},
						"selection":
						[
							[
								948,
								948
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FORMATTER.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2230,
						"regions":
						{
						},
						"selection":
						[
							[
								2230,
								2230
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 264.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/bloody_simruns/imports/Pipeline_FPADD_sourcefiles/tb_FPU_PIPELINED_FPADDSUB2_vector_testing.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35130,
						"regions":
						{
						},
						"selection":
						[
							[
								8307,
								8307
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4334.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/new/CORDIC_Arch3.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20406,
						"regions":
						{
						},
						"selection":
						[
							[
								629,
								629
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/addsub/FPU_ADD_Substract_PIPELINED.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24832,
						"regions":
						{
						},
						"selection":
						[
							[
								13302,
								13302
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7101.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/Resultados/CORDIC/CORDIC_Arch3_Vivado/CORDIC_Arch3_Vivado.srcs/sources_1/imports/addsub/FSM_input_enable.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3812,
						"regions":
						{
						},
						"selection":
						[
							[
								2638,
								2496
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1528.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/home/jorge/Documents/Proyecto",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "/home/jorge/de",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "/home/jorge/Graduación/4Marco",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "/home/jorge/Teórico/FPUs/NTNU",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/home/jorge/FPU/low-cost-fpu-src/fpu_top.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/home/jorge/FPU/low-cost-fpu-src/testbenches/fpu_top_exception_tb.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "/home/jorge/Documents/1Proyectos_TesisdeGraduacion/FPGA_FLOW/Add_Sub/FPADDFPSUB_Pipelined_sims/FPADDFPSUB_Pipelined.srcs/sources_1/imports/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FSM_input_enable.v",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3526,
						"regions":
						{
						},
						"selection":
						[
							[
								2609,
								2609
							]
						],
						"settings":
						{
							"syntax": "Packages/Verilog/Verilog.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 48.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 86.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 24.0
	},
	"pinned_build_system": "",
	"project": "ASICFLOW.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"gener",
				"~/Documents/1Proyectos_TesisdeGraduacion_ASIC/my_sourcefiles/Source_Files/FPU_Interface/fpaddsub_arch2/exp_operation.v"
			],
			[
				"",
				"~/Documents/Karatsuba_FPU/Pipeline_FPADD_sourcefiles/FPU_ADD_Substract_PIPELINED.v"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 41.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"genera",
				"generate"
			],
			[
				"ge",
				"generate"
			],
			[
				"",
				"Add_Subt"
			]
		],
		"width": 278.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 263.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
